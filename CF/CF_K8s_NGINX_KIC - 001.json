{
 "AWSTemplateFormatVersion": "2010-09-09",
 "Description": "**WARNING** This template creates a new VPC and all necessary AWS Resources including EC2 Instances. You will be billed by AWS for the AWS Resources used if you create a stack from this template.",

 "Mappings": {
  "IPAddress": {
   "VPC": {
    "PreFix": "10.1"
   },
   "K8sNode": {
    "InFix": "1"
   },
   "K8sMaster1": {
    "SufFix": "11"
   },
   "K8sWorker1": {
    "SufFix": "101"
   },
   "K8sWorker2": {
    "SufFix": "102"
   },
   "K8sWorker3": {
    "SufFix": "103"
   },
   "K8sWorker4": {
    "SufFix": "104"
   },
   "K8sWorker5": {
    "SufFix": "105"
   },
   "K8sWorker6": {
    "SufFix": "106"
   },
   "K8sWorker7": {
    "SufFix": "107"
   },
   "K8sWorker8": {
    "SufFix": "108"
   },
   "K8sWorker9": {
    "SufFix": "109"
   },
   "K8sPod": {
    "CIDR": "10.244.0.0/16"
   },
   "K8sService": {
    "CIDR": "10.96.0.0/12"
   }
  },
  "RegionAMI": {
   "af-south-1": {
    "ubuntu1804amd64": "ami-075520a13dc442833",
    "ubuntu1804arm64": "ami-06aa574bdb0802086",
    "ubuntu2004amd64": "ami-0c85b1d3c76beeb34",
    "ubuntu2004arm64": "ami-0bc3e054e358e0568"
   },
   "ap-east-1": {
    "ubuntu1804amd64": "ami-0a4e8c6468d92c210",
    "ubuntu1804arm64": "ami-05b55058097a955d7",
    "ubuntu2004amd64": "ami-0cb175a4bd5e1857b",
    "ubuntu2004arm64": "ami-028fd3ee5bf847e2a"
   },
   "ap-northeast-1": {
    "ubuntu1804amd64": "ami-0620ef6ee255ea559",
    "ubuntu1804arm64": "ami-0588207319c85e253",
    "ubuntu2004amd64": "ami-03f396733f38d658b",
    "ubuntu2004arm64": "ami-0e08732bb3f9ad0eb"
   },
   "ap-south-1": {
    "ubuntu1804amd64": "ami-0c0490c60db84298f",
    "ubuntu1804arm64": "ami-0d69d4a1644d0352f",
    "ubuntu2004amd64": "ami-0c1566e39d136b269",
    "ubuntu2004arm64": "ami-0d12ee8d98a5d85b1"
   },
   "ap-southeast-1": {
    "ubuntu1804amd64": "ami-09b5aaebc21c273eb",
    "ubuntu1804arm64": "ami-07a30331c4ec37164",
    "ubuntu2004amd64": "ami-084009f26f70a7c0b",
    "ubuntu2004arm64": "ami-066c736541a61c4a0"
   },
   "ca-central-1": {
    "ubuntu1804amd64": "ami-05c0545bdc0bbff91",
    "ubuntu1804arm64": "ami-08a20fcaf44b82721",
    "ubuntu2004amd64": "ami-0fc1738fbeaf067cf",
    "ubuntu2004arm64": "ami-0c316e78a547892a5"
   },
   "eu-central-1": {
    "ubuntu1804amd64": "ami-08db015a4afd75546",
    "ubuntu1804arm64": "ami-04b1b136efb7988cf",
    "ubuntu2004amd64": "ami-078ca7285317cfe91",
    "ubuntu2004arm64": "ami-0989c7c523fe5753d"
   },
   "eu-north-1": {
    "ubuntu1804amd64": "ami-05916395833cb9690",
    "ubuntu1804arm64": "ami-033b5653d52eb5a16",
    "ubuntu2004amd64": "ami-0f7828a9c19ff4a9e",
    "ubuntu2004arm64": "ami-0b86cecfc8176e5af"
   },
   "eu-south-1": {
    "ubuntu1804amd64": "ami-03839a9ab91b19abc",
    "ubuntu1804arm64": "ami-024a00245ef0a590d",
    "ubuntu2004amd64": "ami-07bb6ad16aa5572c5",
    "ubuntu2004arm64": "ami-05bd368a90e3e7cfa"
   },
   "eu-west-1": {
    "ubuntu1804amd64": "ami-0f5b07b31937d4275",
    "ubuntu1804arm64": "ami-091303fb47b39c631",
    "ubuntu2004amd64": "ami-06c5b2809791cf59c",
    "ubuntu2004arm64": "ami-0de2831d62e664a4e"
   },
   "me-south-1": {
    "ubuntu1804amd64": "ami-019ba1b47cfb5211e",
    "ubuntu1804arm64": "ami-07ecba43392157832",
    "ubuntu2004amd64": "ami-003956846b724fede",
    "ubuntu2004arm64": "ami-0830333f3a3b8d188"
   },
   "sa-east-1": {
    "ubuntu1804amd64": "ami-092dc94ff1b65b5c2",
    "ubuntu1804arm64": "ami-012575a8937727318",
    "ubuntu2004amd64": "ami-045a803b4a81b4175",
    "ubuntu2004arm64": "ami-00f68a640b5dff2c3"
   },
   "us-east-1": {
    "ubuntu1804amd64": "ami-0e4d932065378fd3d",
    "ubuntu1804arm64": "ami-09ecbfbe7ab087fb0",
    "ubuntu2004amd64": "ami-01de8ddb33de7a3d3",
    "ubuntu2004arm64": "ami-0b46d8cdf02223688"
   },
   "us-west-1": {
    "ubuntu1804amd64": "ami-05620e35978c63272",
    "ubuntu1804arm64": "ami-014a389295a649304",
    "ubuntu2004amd64": "ami-009c002b1cd1b34da",
    "ubuntu2004arm64": "ami-04f175f1402a68daf"
   },
   "cn-north-1": {
    "ubuntu1804amd64": "ami-04d2bfd6d1ad04148",
    "ubuntu1804arm64": "ami-0bcd7be0127093ece",
    "ubuntu2004amd64": "ami-0b6277ff0310832fb",
    "ubuntu2004arm64": "ami-09c84bcb24385eae0"
   },
   "cn-northwest-1": {
    "ubuntu1804amd64": "ami-035fe42779786b0d8",
    "ubuntu1804arm64": "ami-0c82266e19d47a39f",
    "ubuntu2004amd64": "ami-06ada3264ec0d22b4",
    "ubuntu2004arm64": "ami-0a8775a41b35c0df8"
   },
   "us-gov-east-1": {
    "ubuntu1804amd64": "ami-0448311ded7d81e94",
    "ubuntu1804arm64": "ami-01126c6d455c129d2",
    "ubuntu2004amd64": "ami-0cb7240ebe7a02450",
    "ubuntu2004arm64": "ami-0ce79d6fa9e9a242e"
   },
   "us-gov-west-1": {
    "ubuntu1804amd64": "ami-0b0e99fc26b846798",
    "ubuntu1804arm64": "ami-0f69d8bba30708f42",
    "ubuntu2004amd64": "ami-0777d7afb149b4542",
    "ubuntu2004arm64": "ami-04a2f96ef9b12b2b1"
   },
   "ap-northeast-2": {
    "ubuntu1804amd64": "ami-0f77aba17625db03b",
    "ubuntu1804arm64": "ami-0ad9024ffcffc52ac",
    "ubuntu2004amd64": "ami-09378a0a8e36fabc7",
    "ubuntu2004arm64": "ami-004e60810746b7f8b"
   },
   "ap-southeast-2": {
    "ubuntu1804amd64": "ami-0b643a2ce5f48199a",
    "ubuntu1804arm64": "ami-0ca133384d447f902",
    "ubuntu2004amd64": "ami-0ad3265c866331223",
    "ubuntu2004arm64": "ami-0042eaf871ef4355b"
   },
   "eu-west-2": {
    "ubuntu1804amd64": "ami-0a14509f661bf2964",
    "ubuntu1804arm64": "ami-09740bfdcd34604a0",
    "ubuntu2004amd64": "ami-0e312244e15c975b0",
    "ubuntu2004arm64": "ami-07888f2a73d223060"
   },
   "us-east-2": {
    "ubuntu1804amd64": "ami-063e88ad6c9af427d",
    "ubuntu1804arm64": "ami-05bcce79c6ca98b65",
    "ubuntu2004amd64": "ami-051d99278ba9fdc66",
    "ubuntu2004arm64": "ami-00393c6b4ca02b918"
   },
   "us-west-2": {
    "ubuntu1804amd64": "ami-0b7d93899b51ff83b",
    "ubuntu1804arm64": "ami-0eef97ed575da67fa",
    "ubuntu2004amd64": "ami-0fc272c9b2d204826",
    "ubuntu2004arm64": "ami-0e96c6102dc1ebe17"
   },
   "ap-northeast-3": {
    "ubuntu1804amd64": "ami-06947c2f8a47debf3",
    "ubuntu1804arm64": "ami-0f35b44112e6373e6",
    "ubuntu2004amd64": "ami-02a8547248b1cc18b",
    "ubuntu2004arm64": "ami-02b41af1c35e46c89"
   },
   "eu-west-3": {
    "ubuntu1804amd64": "ami-0b722faecb702e094",
    "ubuntu1804arm64": "ami-0abc3ac76681fdf72",
    "ubuntu2004amd64": "ami-08d3d8790db280475",
    "ubuntu2004arm64": "ami-09970d0bbfea77f3e"
   }
  },
  "BigIPRegionAMI": {
   "af-south-1": {
    "AllOneBootLocation": "ami-0876133f99636421d",
    "AllTwoBootLocations": "ami-08e690156e49bd7ad",
    "LTMOneBootLocation": "ami-02c5997d6f136eb8a",
    "LTMTwoBootLocations": "ami-086bc2acd0c2c2eee"
   },
   "ap-east-1": {
    "AllOneBootLocation": "ami-014b142c9e4a6001e",
    "AllTwoBootLocations": "ami-01ebb3f7e562db1b4",
    "LTMOneBootLocation": "ami-0edbf33a2a6917694",
    "LTMTwoBootLocations": "ami-02b0742a0a1f7dc04"
   },
   "ap-northeast-1": {
    "AllOneBootLocation": "ami-0b46f2be2d8b73273",
    "AllTwoBootLocations": "ami-0b020f9013c758589",
    "LTMOneBootLocation": "ami-02018b95758ee3b85",
    "LTMTwoBootLocations": "ami-07655964612701c10"
   },
   "ap-northeast-2": {
    "AllOneBootLocation": "ami-06a43ee69cc633f80",
    "AllTwoBootLocations": "ami-0de81144ce7c08c31",
    "LTMOneBootLocation": "ami-04a0f0b0533850632",
    "LTMTwoBootLocations": "ami-03e78c47d7012035c"
   },
   "ap-northeast-3": {
    "AllOneBootLocation": "ami-09aac11c2dbed72da",
    "AllTwoBootLocations": "ami-0db513c6da6afaa28",
    "LTMOneBootLocation": "ami-01d3aa718212af499",
    "LTMTwoBootLocations": "ami-0e4739905b9c1e9d4"
   },
   "ap-south-1": {
    "AllOneBootLocation": "ami-097cd41020a8734b5",
    "AllTwoBootLocations": "ami-0068f483666acedaa",
    "LTMOneBootLocation": "ami-07cb34d8f1f14f208",
    "LTMTwoBootLocations": "ami-09beb8c7216bf5480"
   },
   "ap-southeast-1": {
    "AllOneBootLocation": "ami-0b6ab62b8d3b339d6",
    "AllTwoBootLocations": "ami-0db52dc4fd51f604a",
    "LTMOneBootLocation": "ami-0271c68bdd2561ed6",
    "LTMTwoBootLocations": "ami-0a74184c83d6cddab"
   },
   "ap-southeast-2": {
    "AllOneBootLocation": "ami-01cdc1498b0f4dbee",
    "AllTwoBootLocations": "ami-03b561738463564d0",
    "LTMOneBootLocation": "ami-05457807d74d02035",
    "LTMTwoBootLocations": "ami-06190d56073fa57e7"
   },
   "ca-central-1": {
    "AllOneBootLocation": "ami-040bc21b21f8f76c1",
    "AllTwoBootLocations": "ami-00c035493fc7a4164",
    "LTMOneBootLocation": "ami-0d7af1960e66ad462",
    "LTMTwoBootLocations": "ami-01757ccd30c6678c7"
   },
   "cn-north-1": {
    "AllOneBootLocation": "ami-06fab2bab2d092024",
    "AllTwoBootLocations": "ami-0f431377a42f0071e",
    "LTMOneBootLocation": "ami-0ef121a9a0ff63820",
    "LTMTwoBootLocations": "ami-0a21933527877794a"
   },
   "cn-northwest-1": {
    "AllOneBootLocation": "ami-08c5fc960595b3bdb",
    "AllTwoBootLocations": "ami-0b57f2201446d3bfc",
    "LTMOneBootLocation": "ami-0456bb83509f57964",
    "LTMTwoBootLocations": "ami-08ed59807743ee8dd"
   },
   "eu-central-1": {
    "AllOneBootLocation": "ami-0bb5247015ec0f5a3",
    "AllTwoBootLocations": "ami-0be8f228048fe57eb",
    "LTMOneBootLocation": "ami-01d1a4934649669de",
    "LTMTwoBootLocations": "ami-02a644f8c0908973a"
   },
   "eu-north-1": {
    "AllOneBootLocation": "ami-071ad492e64529c1d",
    "AllTwoBootLocations": "ami-088cdcbd1b65c6f47",
    "LTMOneBootLocation": "ami-07052865f824bdf6f",
    "LTMTwoBootLocations": "ami-0e447837f74e1c57d"
   },
   "eu-south-1": {
    "AllOneBootLocation": "ami-0f17da141a85ad604",
    "AllTwoBootLocations": "ami-0b78a0ae7f7b5d2da",
    "LTMOneBootLocation": "ami-03bf6ce47a0e574df",
    "LTMTwoBootLocations": "ami-0fb65e795523ee095"
   },
   "eu-west-1": {
    "AllOneBootLocation": "ami-077af246290afe9cf",
    "AllTwoBootLocations": "ami-06ad85690306d2301",
    "LTMOneBootLocation": "ami-065676b6458042b8c",
    "LTMTwoBootLocations": "ami-0c68f26cd6217d832"
   },
   "eu-west-2": {
    "AllOneBootLocation": "ami-0e67b261372ff6de6",
    "AllTwoBootLocations": "ami-09254b31381c0aa00",
    "LTMOneBootLocation": "ami-0c3423e70bc8b9360",
    "LTMTwoBootLocations": "ami-01335f7cd051fdc04"
   },
   "eu-west-3": {
    "AllOneBootLocation": "ami-0fa19ae4e9121c573",
    "AllTwoBootLocations": "ami-0661833b30df7f0fd",
    "LTMOneBootLocation": "ami-0408dd9891f0bc6be",
    "LTMTwoBootLocations": "ami-0acfca07619972108"
   },
   "me-south-1": {
    "AllOneBootLocation": "ami-0aac93f32ee899846",
    "AllTwoBootLocations": "ami-03b3db65773cb5d65",
    "LTMOneBootLocation": "ami-0440b72c21efee17a",
    "LTMTwoBootLocations": "ami-0a4f65922ac198cbe"
   },
   "sa-east-1": {
    "AllOneBootLocation": "ami-0cf10a3d2ca8089f5",
    "AllTwoBootLocations": "ami-086860bb7b24fb21d",
    "LTMOneBootLocation": "ami-0830d675472fa5abc",
    "LTMTwoBootLocations": "ami-063e5712ce6838ece"
   },
   "us-east-1": {
    "AllOneBootLocation": "ami-09277911650fda36d",
    "AllTwoBootLocations": "ami-08d7cf776e3a0e6fb",
    "LTMOneBootLocation": "ami-01b9838f7fd6d54ea",
    "LTMTwoBootLocations": "ami-08abeb5ce9777e8fc"
   },
   "us-east-2": {
    "AllOneBootLocation": "ami-029d7d4025e2780f7",
    "AllTwoBootLocations": "ami-0f515827136b66263",
    "LTMOneBootLocation": "ami-0a5c3a06a4321b50b",
    "LTMTwoBootLocations": "ami-0d8e044e8704a8706"
   },
   "us-gov-east-1": {
    "AllOneBootLocation": "ami-07318bba145374fae",
    "AllTwoBootLocations": "ami-04b2f46c4fc5ee792",
    "LTMOneBootLocation": "ami-01263b068f640488b",
    "LTMTwoBootLocations": "ami-05af4ab1676467f44"
   },
   "us-gov-west-1": {
    "AllOneBootLocation": "ami-00f1b790634c475b5",
    "AllTwoBootLocations": "ami-088b58b305b3603c4",
    "LTMOneBootLocation": "ami-06c59ba5da6f1e72e",
    "LTMTwoBootLocations": "ami-0654df1f38c8dfcdb"
   },
   "us-west-1": {
    "AllOneBootLocation": "ami-0aa95572907d6083d",
    "AllTwoBootLocations": "ami-0ccabf880ba23f375",
    "LTMOneBootLocation": "ami-0ab38710a1acbefc8",
    "LTMTwoBootLocations": "ami-0e25564e6242ed060"
   },
   "us-west-2": {
    "AllOneBootLocation": "ami-0c4d4b14edf4213ab",
    "AllTwoBootLocations": "ami-0ebb4b5eb9f5029ad",
    "LTMOneBootLocation": "ami-0e461cff3adc7fe90",
    "LTMTwoBootLocations": "ami-04c9f433a0551fc2a"
   }
  }
 },

 "Conditions": {
  "CreateWorkerNode2": { "Fn::Or": [ { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "2" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "3" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "4" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "5" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "6" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "7" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "8" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "9" ] } ] },
  "CreateWorkerNode3": { "Fn::Or": [ { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "3" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "4" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "5" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "6" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "7" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "8" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "9" ] } ] },
  "CreateWorkerNode4": { "Fn::Or": [ { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "4" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "5" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "6" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "7" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "8" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "9" ] } ] },
  "CreateWorkerNode5": { "Fn::Or": [ { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "5" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "6" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "7" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "8" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "9" ] } ] },
  "CreateWorkerNode6": { "Fn::Or": [ { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "6" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "7" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "8" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "9" ] } ] },
  "CreateWorkerNode7": { "Fn::Or": [ { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "7" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "8" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "9" ] } ] },
  "CreateWorkerNode8": { "Fn::Or": [ { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "8" ] }, { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "9" ] } ] },
  "CreateWorkerNode9": { "Fn::Equals": [ { "Ref": "NumberOfK8sWorkerNode" }, "9" ] },
  "DefaultK8sNodeImageID": { "Fn::Equals": [ { "Ref": "K8sNodeImageID" }, "Default" ] },
  "SkipNGINXCompilation": { "Fn::Equals": [ { "Ref": "SkipNGINXPlusCompilation" }, "Yes" ] }
 },

 "Parameters": {
  "TagPreFix": {
   "Type": "String",
   "Default": "CF",
   "AllowedPattern": "^[a-zA-Z][0-9a-zA-Z]*$",
   "ConstraintDescription": "Kindly check the TagPreFix parameter input. Only Alphanumeric characters allowed.",
   "Description": "Prefix to be given to all possible resources created by this stack-template."
  },
  "K8sNodeImageID": {
   "Type": "String",
   "Default": "Default",
   "AllowedPattern": "^([aA][mM][iI]\\-)([0-9a-zA-Z]{8}|[0-9a-zA-Z]{17})$|^Default$",
   "ConstraintDescription": "Kindly check the K8sNodeImageID parameter input to follow valid AMI ID naming convention.",
   "Description": "Provide a valid AMI ID of Ubuntu Server for the K8s Nodes, or use the Default AMI ID based on https://cloud-images.ubuntu.com/locator/ec2/ ."
  },
  "K8sNodeImageType": {
   "Type": "String",
   "Default": "ubuntu2004amd64",
   "AllowedValues": [ "ubuntu1804amd64", "ubuntu1804arm64", "ubuntu2004amd64", "ubuntu2004arm64" ],
   "Description": "Select an AMI Type of Ubuntu Server for the K8s Nodes, i.e. Version and Architecture of the Ubuntu Server. This parameter does NOT matter if you provide/use NON-Default AMI ID."
  },
  "K8sNodeInstanceType": {
   "Type": "String",
   "Default": "t3a.medium",
   "AllowedPattern": "^[0-9a-zA-Z]{1,8}\\.[0-9a-zA-Z]{1,22}$",
   "ConstraintDescription": "Kindly check the K8sNodeInstanceType parameter input to follow valid Instance Type naming convention.",
   "Description": "Provide a valid Instance Type for the K8s Nodes."
  },
  "NumberOfK8sWorkerNode": {
   "Type": "String",
   "Default": "3",
   "AllowedValues": [ "1", "2", "3", "4", "5", "6", "7", "8", "9" ],
   "AllowedPattern": "^[1-9]{1}$",
   "Description": "Number of K8s Worker Node(s) to be created."
  },
  "EC2SSHKeyPair": {
   "Type": "AWS::EC2::KeyPair::KeyName",
   "Description": "EC2 KeyPair to enable SSH access to the EC2 instances. Select the SSH KeyPair you have access to."
  },
  "ParentDomainName": {
   "Type": "String",
   "Default": "aadc.link",
   "Description": "Existing registered Domain Name in AWS Route53 which you have access to add, modify and delete."
  },

  "K8sSSHPrivateKey": {
   "Type": "String",
   "NoEcho": "true",
   "AllowedPattern": "^([0-9a-zA-Z\\-\\ ]+)\\\\n([0-9a-zA-Z\\/\\+\\\\]+)([\\=]{0,2})\\\\n([0-9a-zA-Z\\-\\ ]+)$",
   "ConstraintDescription": "Kindly check the K8sSSHPrivateKey parameter input.",
   "Description": "Paste the text content of a SSH Private Key used for K8s Master to connect and send instruction to K8s Worker Nodes during setup. It is STRONGLY RECOMMENDED that you create and use your own KeyPair for security purposes."
  },
  "K8sSSHPublicKey": {
   "Type": "String",
   "NoEcho": "true",
   "AllowedPattern": "^([0-9a-zA-Z\\-]+) ([0-9a-zA-Z\\/\\+\\\\]+)([\\=]{0,2}) ([0-9a-zA-Z\\-]+)@([0-9a-zA-Z\\-]+)$",
   "ConstraintDescription": "Kindly check the K8sSSHPublicKey parameter input.",
   "Description": "Paste the text content of a SSH Public Key used for K8s Master to connect and send instruction to K8s Worker Nodes during setup."
  },
  "TimeZone": {
   "Default": "Asia/Singapore",
   "AllowedValues": [ "Africa/Abidjan","Africa/Accra","Africa/Algiers","Africa/Bissau","Africa/Cairo","Africa/Casablanca","Africa/Ceuta","Africa/El_Aaiun","Africa/Johannesburg","Africa/Juba","Africa/Khartoum","Africa/Lagos","Africa/Maputo","Africa/Monrovia","Africa/Nairobi","Africa/Ndjamena","Africa/Sao_Tome","Africa/Tripoli","Africa/Tunis","Africa/Windhoek","America/Adak","America/Anchorage","America/Araguaina","America/Argentina/Buenos_Aires","America/Argentina/Catamarca","America/Argentina/Cordoba","America/Argentina/Jujuy","America/Argentina/La_Rioja","America/Argentina/Mendoza","America/Argentina/Rio_Gallegos","America/Argentina/Salta","America/Argentina/San_Juan","America/Argentina/San_Luis","America/Argentina/Tucuman","America/Argentina/Ushuaia","America/Asuncion","America/Atikokan","America/Bahia","America/Bahia_Banderas","America/Barbados","America/Belem","America/Belize","America/Blanc-Sablon","America/Boa_Vista","America/Bogota","America/Boise","America/Cambridge_Bay","America/Campo_Grande","America/Cancun","America/Caracas","America/Cayenne","America/Chicago","America/Chihuahua","America/Costa_Rica","America/Creston","America/Cuiaba","America/Curacao","America/Danmarkshavn","America/Dawson","America/Dawson_Creek","America/Denver","America/Detroit","America/Edmonton","America/Eirunepe","America/El_Salvador","America/Fort_Nelson","America/Fortaleza","America/Glace_Bay","America/Goose_Bay","America/Grand_Turk","America/Guatemala","America/Guayaquil","America/Guyana","America/Halifax","America/Havana","America/Hermosillo","America/Indiana/Indianapolis","America/Indiana/Knox","America/Indiana/Marengo","America/Indiana/Petersburg","America/Indiana/Tell_City","America/Indiana/Vevay","America/Indiana/Vincennes","America/Indiana/Winamac","America/Inuvik","America/Iqaluit","America/Jamaica","America/Juneau","America/Kentucky/Louisville","America/Kentucky/Monticello","America/La_Paz","America/Lima","America/Los_Angeles","America/Maceio","America/Managua","America/Manaus","America/Martinique","America/Matamoros","America/Mazatlan","America/Menominee","America/Merida","America/Metlakatla","America/Mexico_City","America/Miquelon","America/Moncton","America/Monterrey","America/Montevideo","America/Nassau","America/New_York","America/Nipigon","America/Nome","America/Noronha","America/North_Dakota/Beulah","America/North_Dakota/Center","America/North_Dakota/New_Salem","America/Nuuk","America/Ojinaga","America/Panama","America/Pangnirtung","America/Paramaribo","America/Phoenix","America/Port-au-Prince","America/Port_of_Spain","America/Porto_Velho","America/Puerto_Rico","America/Punta_Arenas","America/Rainy_River","America/Rankin_Inlet","America/Recife","America/Regina","America/Resolute","America/Rio_Branco","America/Santarem","America/Santiago","America/Santo_Domingo","America/Sao_Paulo","America/Scoresbysund","America/Sitka","America/St_Johns","America/Swift_Current","America/Tegucigalpa","America/Thule","America/Thunder_Bay","America/Tijuana","America/Toronto","America/Vancouver","America/Whitehorse","America/Winnipeg","America/Yakutat","America/Yellowknife","Antarctica/Casey","Antarctica/Davis","Antarctica/DumontDUrville","Antarctica/Macquarie","Antarctica/Mawson","Antarctica/Palmer","Antarctica/Rothera","Antarctica/Syowa","Antarctica/Troll","Antarctica/Vostok","Asia/Almaty","Asia/Amman","Asia/Anadyr","Asia/Aqtau","Asia/Aqtobe","Asia/Ashgabat","Asia/Atyrau","Asia/Baghdad","Asia/Baku","Asia/Bangkok","Asia/Barnaul","Asia/Beirut","Asia/Bishkek","Asia/Brunei","Asia/Chita","Asia/Choibalsan","Asia/Colombo","Asia/Damascus","Asia/Dhaka","Asia/Dili","Asia/Dubai","Asia/Dushanbe","Asia/Famagusta","Asia/Gaza","Asia/Hebron","Asia/Ho_Chi_Minh","Asia/Hong_Kong","Asia/Hovd","Asia/Irkutsk","Asia/Jakarta","Asia/Jayapura","Asia/Jerusalem","Asia/Kabul","Asia/Kamchatka","Asia/Karachi","Asia/Kathmandu","Asia/Khandyga","Asia/Kolkata","Asia/Krasnoyarsk","Asia/Kuala_Lumpur","Asia/Kuching","Asia/Macau","Asia/Magadan","Asia/Makassar","Asia/Manila","Asia/Nicosia","Asia/Novokuznetsk","Asia/Novosibirsk","Asia/Omsk","Asia/Oral","Asia/Pontianak","Asia/Pyongyang","Asia/Qatar","Asia/Qostanay","Asia/Qyzylorda","Asia/Riyadh","Asia/Sakhalin","Asia/Samarkand","Asia/Seoul","Asia/Shanghai","Asia/Singapore","Asia/Srednekolymsk","Asia/Taipei","Asia/Tashkent","Asia/Tbilisi","Asia/Tehran","Asia/Thimphu","Asia/Tokyo","Asia/Tomsk","Asia/Ulaanbaatar","Asia/Urumqi","Asia/Ust-Nera","Asia/Vladivostok","Asia/Yakutsk","Asia/Yangon","Asia/Yekaterinburg","Asia/Yerevan","Atlantic/Azores","Atlantic/Bermuda","Atlantic/Canary","Atlantic/Cape_Verde","Atlantic/Faroe","Atlantic/Madeira","Atlantic/Reykjavik","Atlantic/South_Georgia","Atlantic/Stanley","Australia/Adelaide","Australia/Brisbane","Australia/Broken_Hill","Australia/Darwin","Australia/Eucla","Australia/Hobart","Australia/Lindeman","Australia/Lord_Howe","Australia/Melbourne","Australia/Perth","Australia/Sydney","Europe/Amsterdam","Europe/Andorra","Europe/Astrakhan","Europe/Athens","Europe/Belgrade","Europe/Berlin","Europe/Brussels","Europe/Bucharest","Europe/Budapest","Europe/Chisinau","Europe/Copenhagen","Europe/Dublin","Europe/Gibraltar","Europe/Helsinki","Europe/Istanbul","Europe/Kaliningrad","Europe/Kiev","Europe/Kirov","Europe/Lisbon","Europe/London","Europe/Luxembourg","Europe/Madrid","Europe/Malta","Europe/Minsk","Europe/Monaco","Europe/Moscow","Europe/Oslo","Europe/Paris","Europe/Prague","Europe/Riga","Europe/Rome","Europe/Samara","Europe/Saratov","Europe/Simferopol","Europe/Sofia","Europe/Stockholm","Europe/Tallinn","Europe/Tirane","Europe/Ulyanovsk","Europe/Uzhgorod","Europe/Vienna","Europe/Vilnius","Europe/Volgograd","Europe/Warsaw","Europe/Zaporozhye","Europe/Zurich","Indian/Chagos","Indian/Christmas","Indian/Cocos","Indian/Kerguelen","Indian/Mahe","Indian/Maldives","Indian/Mauritius","Indian/Reunion","Pacific/Apia","Pacific/Auckland","Pacific/Bougainville","Pacific/Chatham","Pacific/Chuuk","Pacific/Easter","Pacific/Efate","Pacific/Enderbury","Pacific/Fakaofo","Pacific/Fiji","Pacific/Funafuti","Pacific/Galapagos","Pacific/Gambier","Pacific/Guadalcanal","Pacific/Guam","Pacific/Honolulu","Pacific/Kiritimati","Pacific/Kosrae","Pacific/Kwajalein","Pacific/Majuro","Pacific/Marquesas","Pacific/Nauru","Pacific/Niue","Pacific/Norfolk","Pacific/Noumea","Pacific/Pago_Pago","Pacific/Palau","Pacific/Pitcairn","Pacific/Pohnpei","Pacific/Port_Moresby","Pacific/Rarotonga","Pacific/Tahiti","Pacific/Tarawa","Pacific/Tongatapu","Pacific/Wake","Pacific/Wallis","UTC" ],
   "Description": "Select a TimeZone to be applied for all Nodes.",
   "Type": "String"
  },

  "OSPreparationScript": {
   "Type": "String",
   "Default": "https://raw.githubusercontent.com/gjwdyk/Notes-K8s/main/Bash/PrepOS.sh",
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$",
   "ConstraintDescription": "Kindly check the OSPreparationScript parameter input. Ensure it follows common URL pattern.",
   "Description": "URL of a bash script used to prepare the ubuntu OS for Kubernetes implementation. If the bash script file is located at AWS S3, ensure that this CloudFormation template can read the file. If the bash script file is located at GitHub, ensure that this CloudFormation template can read the RAW file (i.e. not a web page containing the file)."
  },
  "DockerPreparationScript": {
   "Type": "String",
   "Default": "https://raw.githubusercontent.com/gjwdyk/Notes-K8s/main/Bash/PrepDocker.sh",
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$",
   "ConstraintDescription": "Kindly check the DockerPreparationScript parameter input. Ensure it follows common URL pattern.",
   "Description": "URL of a bash script used to prepare the containerization platform for Kubernetes implementation (e.g. Docker). If the bash script file is located at AWS S3, ensure that this CloudFormation template can read the file. If the bash script file is located at GitHub, ensure that this CloudFormation template can read the RAW file (i.e. not a web page containing the file)."
  },
  "CommonK8sPreparationScript": {
   "Type": "String",
   "Default": "https://raw.githubusercontent.com/gjwdyk/Notes-K8s/main/Bash/PrepCommonK8s.sh",
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$",
   "ConstraintDescription": "Kindly check the CommonK8sPreparationScript parameter input. Ensure it follows common URL pattern.",
   "Description": "URL of a bash script used to prepare the common factors of Kubernetes implementation. If the bash script file is located at AWS S3, ensure that this CloudFormation template can read the file. If the bash script file is located at GitHub, ensure that this CloudFormation template can read the RAW file (i.e. not a web page containing the file)."
  },
  "K8sMasterPreparationScript": {
   "Type": "String",
   "Default": "https://raw.githubusercontent.com/gjwdyk/Notes-K8s/main/Bash/PrepK8sMaster.sh",
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$",
   "ConstraintDescription": "Kindly check the K8sMasterPreparationScript parameter input. Ensure it follows common URL pattern.",
   "Description": "URL of a bash script used to prepare the Kubernetes' master node implementation. If the bash script file is located at AWS S3, ensure that this CloudFormation template can read the file. If the bash script file is located at GitHub, ensure that this CloudFormation template can read the RAW file (i.e. not a web page containing the file)."
  },
  "ClusterNetworkConfiguration": {
   "Type": "String",
   "Default": "https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml",
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$",
   "ConstraintDescription": "Kindly check the ClusterNetworkConfiguration parameter input. Ensure it follows common URL pattern.",
   "Description": "URL of a YAML file to be used to implement a Cluster Networking within the Kubernetes Cluster (e.g. flannel). If the YAML file is located at AWS S3, ensure that this CloudFormation template can read the file. If the YAML file is located at GitHub, ensure that this CloudFormation template can read the RAW file (i.e. not a web page containing the file)."
  },
  "K8sWorkerPreparationScript": {
   "Type": "String",
   "Default": "https://raw.githubusercontent.com/gjwdyk/Notes-K8s/main/Bash/PrepK8sWorker.sh",
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$",
   "ConstraintDescription": "Kindly check the K8sWorkerPreparationScript parameter input. Ensure it follows common URL pattern.",
   "Description": "URL of a bash script used to prepare the Kubernetes' worker nodes implementation. If the bash script file is located at AWS S3, ensure that this CloudFormation template can read the file. If the bash script file is located at GitHub, ensure that this CloudFormation template can read the RAW file (i.e. not a web page containing the file)."
  },
  "K8sServicePreparationScript": {
   "Type": "String",
   "Default": "https://raw.githubusercontent.com/gjwdyk/Notes-K8s/main/Bash/PrepK8sService.sh",
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "ConstraintDescription": "Kindly check the K8sServicePreparationScript parameter input. Ensure it follows common URL pattern.",
   "Description": "URL of a bash script used to deploy fundamental K8s services within the Kubernetes cluster. If the bash script file is located at AWS S3, ensure that this CloudFormation template can read the file. If the bash script file is located at GitHub, ensure that this CloudFormation template can read the RAW file (i.e. not a web page containing the file)."
  },

  "CompileNGINXPlusScript": {
   "Type": "String",
   "Default": "https://raw.githubusercontent.com/gjwdyk/Notes-K8s/main/Bash/CompileNGINXPlus.sh",
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "ConstraintDescription": "Kindly check the CompileNGINXPlusScript parameter input. Ensure it follows common URL pattern.",
   "Description": "URL of a bash script to compile NGINX+ . If the bash script file is located at AWS S3, ensure that this CloudFormation template can read the file. If the bash script file is located at GitHub, ensure that this CloudFormation template can read the RAW file (i.e. not a web page containing the file)."
  },
  "SkipNGINXPlusCompilation": {
   "Type": "String",
   "Default": "Yes",
   "AllowedValues": [ "Yes", "No" ],
   "AllowedPattern": "^Yes|No$",
   "Description": "Whether to Skip Compilation of NGINX+ ; Example: If you have compiled the NGINX+ before."
  },
  "NGINXRepositoryCertificate": {
   "Type": "String",
   "NoEcho": "true",
   "AllowedPattern": "^([0-9a-zA-Z\\-\\ ]+)\\\\n([0-9a-zA-Z\\/\\+\\\\]+)([\\=]{0,2})\\\\n([0-9a-zA-Z\\-\\ ]+)$|^$",
   "ConstraintDescription": "Kindly check the NGINXRepositoryCertificate parameter input.",
   "Description": "Paste the text content of a NGINX+ Repository Certificate (i.e. nginx-repo.crt file). You can skip this parameter if you're also skipping the NGINX+ Compilation."
  },
  "NGINXRepositoryPrivateKey": {
   "Type": "String",
   "NoEcho": "true",
   "AllowedPattern": "^([0-9a-zA-Z\\-\\ ]+)\\\\n([0-9a-zA-Z\\/\\+\\\\]+)([\\=]{0,2})\\\\n([0-9a-zA-Z\\-\\ ]+)$|^$",
   "ConstraintDescription": "Kindly check the NGINXRepositoryPrivateKey parameter input.",
   "Description": "Paste the text content of a NGINX+ Repository Private Key (i.e. nginx-repo.key file). You can skip this parameter if you're also skipping the NGINX+ Compilation."
  },
  "DockerHubUserID": {
   "Type": "String",
   "Description": "User ID used to access to the (Docker Hub) Repository, for uploading to and downloading from the compiled NGINX+ container. You can skip this parameter if you're also skipping the NGINX+ Compilation. Note that the Repository's User ID must be in sync with the Repository's (Complete) Name, which contains also the User ID information."
  },
  "DockerHubPassword": {
   "Type": "String",
   "NoEcho": "true",
   "Description": "Password for the User ID to access the (Docker Hub) Repository. You can skip this parameter if you're also skipping the NGINX+ Compilation."
  },
  "DockerHubRepositoryName": {
   "Type": "String",
   "Default": "gjwdyk/nginx-ingress",
   "Description": "The (Docker Hub) Repository's Name, for uploading to and downloading from the compiled NGINX+ container. In case of Docker Hub, use format UserID/RepositoryName . Note that the supplied Repository's (Complete) Name, which also contains the Repository's User ID information, must be in sync with the Repository's User ID parameter."
  },
  "NGINXPlusVersion": {
   "Type": "String",
   "Default": "v1.11.3",
   "Description": "Paste the version of NGINX+ to be implemented."
  },
  "NGINXPlusIngressScript": {
   "Type": "String",
   "Default": "https://raw.githubusercontent.com/gjwdyk/Notes-K8s/main/Bash/PrepNGINXPlusKIC.sh",
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "ConstraintDescription": "Kindly check the NGINXPlusIngressScript parameter input. Ensure it follows common URL pattern.",
   "Description": "URL of a bash script to implement NGINX+ as K8s Ingress Controller . If the bash script file is located at AWS S3, ensure that this CloudFormation template can read the file. If the bash script file is located at GitHub, ensure that this CloudFormation template can read the RAW file (i.e. not a web page containing the file)."
  },

  "ApplicationServiceScript": {
   "Type": "String",
   "Default": "https://raw.githubusercontent.com/gjwdyk/Notes-K8s/main/Bash/PrepApplicationService.sh",
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "ConstraintDescription": "Kindly check the K8sServicePreparationScript parameter input. Ensure it follows common URL pattern.",
   "Description": "URL of a bash script used to End User's Application Services within the Kubernetes cluster. If the bash script file is located at AWS S3, ensure that this CloudFormation template can read the file. If the bash script file is located at GitHub, ensure that this CloudFormation template can read the RAW file (i.e. not a web page containing the file)."
  }

  "BigIPImageID": {
   "Type": "String",
   "Default": "Default",
   "AllowedPattern": "^([aA][mM][iI]\\-)([0-9a-zA-Z]{8}|[0-9a-zA-Z]{17})$|^Default$",
   "Description": "Provide a Valid Custom AMI ID of Big-IP in the Region, In Case a Custom Big-IP Image is Required."
  },
  "BigIPInstanceType": {
   "Type": "String",
   "Default": "m5.xlarge",
   "Description": "Provide a valid Instance Type for the Big-IP."
  },
  "BigIPRegistrationKeyLicense": {
   "Type": "String",
   "NoEcho": "true",
   "MinLength": "1",
   "MaxLength": "255",
   "AllowedPattern": "^([A-Z][0-9A-Z]{4}\\-)([0-9A-Z]{5}\\-){3}([0-9A-Z]{7})( \\-\\-add\\-on ([0-9A-Z]{7}\\-[0-9A-Z]{7}))*$",
   "ConstraintDescription": "Must be a valid Big-IP Registration Key License.",
   "Description": "Big-IP Registration Key License. Format : AAAAA-BBBBB-CCCCC-DDDDD-EEEEEEE --add-on FFFFFFF-GGGGGGG --add-on HHHHHHH-IIIIIII ; or simply : AAAAA-BBBBB-CCCCC-DDDDD-EEEEEEE if there is no Add-On module."
  },
  "BigIPModules": {
   "Type": "String",
   "Default": "ltm:nominal,avr:nominal,gtm:nominal,afm:nominal,asm:nominal,fps:nominal,apm:nominal",
   "Description": "Comma separated list of modules and levels to provision, for example: ltm:nominal,avr:nominal,asm:nominal,apm:nominal . Provisionable modules are: afm, am, apm, asm, avr, cgnat, dos, fps, gtm, ilx, lc, ltm, pem, sslo, swg, urldb ."
  },
  "NTPServer": {
   "Default": "0.pool.ntp.org",
   "Description": "NTP server for this implementation",
   "Type": "String"
  },
  "BigIPAdminPassword": {
   "Type": "String",
   "NoEcho": "true",
   "Description": "Password for the Admin User of Big-IP."
  },
  "ConfigurationMethod": {
   "AllowedValues": [ "None", "AS3", "TMSH", "AS3 and TMSH" ],
   "Default": "None",
   "Description": "Select the method to configure the Big-IP. Note that between AS3 and TMSH there are possibilities for conflicts, and therefore both AS3 File and TMSH Commands File need to be sync-ed between each other.",
   "Type": "String"
  },
  "AS3URL": {
   "Type": "String",
   "Default": "https://raw.githubusercontent.com/gjwdyk/BigIP-Lab/master/AS3/AS3_LTM_SSLoL_AVR_NOutB.json",
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "Description": "URL for the AS3 declaration JSON file to be deployed. Input *none* (without the *) to deploy without a service configuration."
  },
  "BigIPTMSHConfiguration": {
   "Type": "String",
   "Default": "https://raw.githubusercontent.com/gjwdyk/BigIP-Lab/master/TMSH/F5_Configurations.sh",
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "Description": "URL of the TMSH Commands File which Big-IP will execute. If the TMSH Commands File is located at AWS S3, ensure that this CloudFormation template can read the file. If the TMSH Commands File is located at GitHub, ensure that this CloudFormation template can read the RAW file (i.e. not a web page containing the file)."
  },
  "SSMTPConfiguration": {
   "Type": "String",
   "Default": "https://raw.githubusercontent.com/gjwdyk/BigIP-Lab/master/SSMTP/GMailSSMTP.conf",
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "Description": "URL of the SSMTP configuration. This CloudFormation template requires a SSMTP configuration (i.e. Mandatory Input). If the SSMTP configuration is located at AWS S3, ensure that this CloudFormation template can read the file. If the SSMTP configuration is located at GitHub, ensure that this CloudFormation template can read the RAW SSMTP configuration file (i.e. NOT a web page containing the SSMTP configuration file)."
  },
  "SMTPUserID": {
   "Type": "String",
   "Description": "User ID used to access to the SMTP Server, for sending the notification. Big-IP uses this account to send notification to the recipient."
  },
  "SMTPUserPassword": {
   "Type": "String",
   "NoEcho": "true",
   "Description": "Password for the User ID to access the SMTP Server."
  },
  "eMailNotificationRecipient": {
   "Type": "String",
   "AllowedPattern": "^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$",
   "Description": "The Recipient's eMail Address of the Big-IP Notification messages."
  },
  "UserAlertConfiguration": {
   "Type": "String",
   "Default": "https://raw.githubusercontent.com/gjwdyk/BigIP-Lab/master/SSMTP/user_alert.archive",
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "Description": "URL of the additional user_alert configuration."
  },
  "UpgradeBigIP": {
   "AllowedValues": [ "Yes", "No" ],
   "Default": "No",
   "Description": "Whether the Big-IP should be Upgraded automatically. If you select **Yes** the Big-IP will be Upgraded, and therefore the corresponding new image URL Path and File Name should be provided. Additional time is also needed for the Upgrade process.",
   "Type": "String"
  },
  "UpgradeImageURLPath": {
   "Type": "String",
   "Default": "https://aws-f5-singapore-hc-demo-bucket-files.s3-ap-southeast-1.amazonaws.com/Big-IP/16.0.1/",
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "Description": "URL Path of the upgrade .iso image. Keep the last / character."
  },
  "UpgradeImageFileName": {
   "Type": "String",
   "Default": "BIGIP-16.0.1.1-0.0.6.iso",
   "AllowedPattern": "^(BIGIP\\-)((([0-9]+)\\.)+)([0-9]+)\\-((([0-9]+)\\.)+)([0-9]+)\\.iso$|^none$",
   "Description": "File Name of the upgrade .iso image."
  },
  "BigIPTrafficTLSKey": {
   "Type": "String",
   "Default": "https://raw.githubusercontent.com/gjwdyk/BigIP-Lab/master/Certificates/aadc.link.rsa.key",
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "Description": "URL of the Private Key used to create the below TLS Certificate. This CloudFormation template requires the TLS Private Key and Certificate (i.e. Mandatory Input). If the Private Key is located at AWS S3, ensure that this CloudFormation template can read the file. If the Private Key is located at GitHub, ensure that this CloudFormation template can read the RAW file (i.e. not a web page containing the file)."
  },
  "BigIPTrafficTLSCertificate": {
   "Type": "String",
   "Default": "https://raw.githubusercontent.com/gjwdyk/BigIP-Lab/master/Certificates/aadc.link.rsa.crt",
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "Description": "URL of the TLS Certificate which Big-IP will use to encrypt or decrypt the requests and responses between users and servers. This CloudFormation template requires the TLS Private Key and Certificate (i.e. Mandatory Input). If the Private Key is located at AWS S3, ensure that this CloudFormation template can read the file. If the Private Key is located at GitHub, ensure that this CloudFormation template can read the RAW file (i.e. not a web page containing the file)."
  },
  "AllowPhoneHome": {
   "AllowedValues": [ "Yes", "No" ],
   "Default": "No",
   "Description": "This deployment can send anonymous device statistics to F5 to help us determine how to improve our solutions. If you select **No**, statistics are not sent.",
   "Type": "String"
  },
  "Lidsa": {
   "Type": "String",
   "NoEcho": "true",
   "Default": "none",
   "AllowedPattern": "^(([A-Z][0-9A-Z]{4}\\-)([0-9A-Z]{5}\\-){3}([0-9A-Z]{7})( \\-\\-add\\-on ([0-9A-Z]{7}\\-[0-9A-Z]{7}))*)(\\\\n(([A-Z][0-9A-Z]{4}\\-)([0-9A-Z]{5}\\-){3}([0-9A-Z]{7})( \\-\\-add\\-on ([0-9A-Z]{7}\\-[0-9A-Z]{7}))*))*$|^none$",
   "Description": "Lorem Ipsum Dolor Sit Amet string. Proposed format are Lorem\\nIpsum\\nDolor\\nSit\\nAmet. Leave the field as it is for default."
  }
 },

 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [
    {
     "Label": {
      "default": "Name Tags Parameters"
     },
     "Parameters": [
      "TagPreFix"
     ]
    },
    {
     "Label": {
      "default": "Common CloudFormation Parameters"
     },
     "Parameters": [
      "K8sNodeImageID",
      "K8sNodeImageType",
      "K8sNodeInstanceType",
      "NumberOfK8sWorkerNode",
      "EC2SSHKeyPair",
      "ParentDomainName"
     ]
    },
    {
     "Label": {
      "default": "Common Operating System Parameters"
     },
     "Parameters": [
      "K8sSSHPrivateKey",
      "K8sSSHPublicKey",
      "TimeZone"
     ]
    },
    {
     "Label": {
      "default": "Kubernetes Parameters"
     },
     "Parameters": [
      "OSPreparationScript",
      "DockerPreparationScript",
      "CommonK8sPreparationScript",
      "K8sMasterPreparationScript",
      "ClusterNetworkConfiguration",
      "K8sWorkerPreparationScript",
      "K8sServicePreparationScript"
     ]
    },
    {
     "Label": {
      "default": "NGINX+ Parameters"
     },
     "Parameters": [
      "CompileNGINXPlusScript",
      "SkipNGINXPlusCompilation",
      "NGINXRepositoryCertificate",
      "NGINXRepositoryPrivateKey",
      "DockerHubUserID",
      "DockerHubPassword",
      "DockerHubRepositoryName",
      "NGINXPlusVersion",
      "NGINXPlusIngressScript"
     ]
    },
    {
     "Label": {
      "default": "Application Service(s) Parameters"
     },
     "Parameters": [
      "ApplicationServiceScript"
     ]
    },
    {
     "Label": {
      "default": "Big-IP Parameters"
     },
     "Parameters": [
      "BigIPImageID",
      "BigIPInstanceType",
      "BigIPRegistrationKeyLicense",
      "BigIPModules",
      "NTPServer",
      "BigIPAdminPassword",
      "ConfigurationMethod",
      "AS3URL",
      "BigIPTMSHConfiguration",
      "SSMTPConfiguration",
      "SMTPUserID",
      "SMTPUserPassword",
      "eMailNotificationRecipient",
      "UserAlertConfiguration",
      "UpgradeBigIP",
      "UpgradeImageURLPath",
      "UpgradeImageFileName",
      "BigIPTrafficTLSKey",
      "BigIPTrafficTLSCertificate",
      "AllowPhoneHome",
      "Lidsa"
     ]
    }
   ],
   "ParameterLabels": {
    "TagPreFix": {
     "default": "PreFix for Name Tags"
    },
    "K8sNodeImageID": {
     "default": "K8s Nodes' Image ID"
    },
    "K8sNodeImageType": {
     "default": "K8s Nodes' Image Type"
    },
    "K8sNodeInstanceType": {
     "default": "K8s Nodes' Instance Type"
    },
    "NumberOfK8sWorkerNode": {
     "default": "Number of K8s Worker Node(s)"
    },
    "EC2SSHKeyPair": {
     "default": "EC2 SSH Key-Pair"
    },
    "ParentDomainName": {
     "default": "Existing Registered Domain Name in AWS Route53"
    },

    "K8sSSHPrivateKey": {
     "default": "K8s Nodes SSH Private Key"
    },
    "K8sSSHPublicKey": {
     "default": "K8s Nodes SSH Public Key"
    },
    "TimeZone": {
     "default": "Time Zone"
    },

    "OSPreparationScript": {
     "default": "URL of OS Preparation Script"
    },
    "DockerPreparationScript": {
     "default": "URL of Docker Preparation Script"
    },
    "CommonK8sPreparationScript": {
     "default": "URL of Common K8s Preparation Script"
    },
    "K8sMasterPreparationScript": {
     "default": "URL of K8s Master Preparation Script"
    },
    "ClusterNetworkConfiguration": {
     "default": "URL of Cluster Networking (flannel) YAML File"
    },
    "K8sWorkerPreparationScript": {
     "default": "URL of K8s Worker Preparation Script"
    },
    "K8sServicePreparationScript": {
     "default": "URL of K8s Fundamental Services Script"
    },

    "CompileNGINXPlusScript": {
     "default": "URL of NGINX+ Compilation Script"
    },
    "SkipNGINXPlusCompilation": {
     "default": "Skip NGINX+ Compilation ?"
    },
    "NGINXRepositoryCertificate": {
     "default": "NGINX+ Repository Certificate"
    },
    "NGINXRepositoryPrivateKey": {
     "default": "NGINX+ Repository Private Key"
    },
    "DockerHubUserID": {
     "default": "Repository (Docker Hub) User ID"
    },
    "DockerHubPassword": {
     "default": "Repository (Docker Hub) Password"
    },
    "DockerHubRepositoryName": {
     "default": "NGINX+'s Repository (Docker Hub) Name"
    },
    "NGINXPlusVersion": {
     "default": "NGINX+ Version"
    },
    "NGINXPlusIngressScript": {
     "default": "URL of NGINX+ KIC Script"
    },
    "ApplicationServiceScript": {
     "default": "URL of Application Service(s) Script"
    },

    "BigIPImageID": {
     "default": "Big-IP Image ID"
    },
    "BigIPInstanceType": {
     "default": "Big-IP Instance Type"
    },
    "BigIPRegistrationKeyLicense": {
     "default": "Big-IP Registration Key License"
    },
    "BigIPModules": {
     "default": "Big-IP Modules to be Provisioned"
    },
    "NTPServer": {
     "default": "NTP Server used by Big-IP"
    },
    "BigIPAdminPassword": {
     "default": "Big-IP's Admin Password"
    },
    "ConfigurationMethod": {
     "default": "Select the Method to Configure Big-IP"
    },
    "AS3URL": {
     "default": "AS3 Declaration URL"
    },
    "BigIPTMSHConfiguration": {
     "default": "URL of the Big-IP TMSH Commands File"
    },
    "SSMTPConfiguration": {
     "default": "URL of the SSMTP Configuration File"
    },
    "SMTPUserID": {
     "default": "User ID to access the SMTP Server"
    },
    "SMTPUserPassword": {
     "default": "Password of the User ID"
    },
    "eMailNotificationRecipient": {
     "default": "Big-IP Notification Recipient's eMail Address"
    },
    "UserAlertConfiguration": {
     "default": "URL of the additional user_alert configuration"
    },
    "UpgradeBigIP": {
     "default": "Upgrade Big-IP ?"
    },
    "UpgradeImageURLPath": {
     "default": "Upgrade Image's URL Path, of the .iso file used to upgrade the Big-IP image"
    },
    "UpgradeImageFileName": {
     "default": "Upgrade Image's File Name, of the .iso file used to upgrade the Big-IP image"
    },
    "BigIPTrafficTLSKey": {
     "default": "URL of the Private Key (of the SSL/TLS Certificate)"
    },
    "BigIPTrafficTLSCertificate": {
     "default": "URL of the SSL/TLS Certificate"
    },
    "AllowPhoneHome": {
     "default": "Send Anonymous Device Statistics to F5"
    },
    "Lidsa": {
     "default": "Lorem Ipsum Dolor Sit Amet"
    }
   }
  }
 },

 "Resources": {
  "VPC": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "EnableDnsSupport": "true",
    "EnableDnsHostnames": "true",
    "CidrBlock": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, "0.0/16" ] ] },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "VPC" ] ] } } ]
   }
  },
  "K8sNodeSubnet": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": { "Ref": "VPC" },
    "AvailabilityZone": { "Fn::Select": [ "0", { "Fn::GetAZs": { "Ref": "AWS::Region" } } ] },
    "MapPublicIpOnLaunch": "true",
    "CidrBlock": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, "0/24" ] ] },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sNodeSubnet" ] ] } } ]
   }
  },
  "InternetGateway": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InternetGateway" ] ] } } ]
   }
  },
  "VPCGatewayAttachment": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "VpcId": { "Ref": "VPC" },
    "InternetGatewayId": { "Ref": "InternetGateway" }
   }
  },
  "K8sNodeRouteTable": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": { "Ref": "VPC" },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sNodeRouteTable" ] ] } } ]
   }
  },
  "K8sNodeRoute": {
   "Type": "AWS::EC2::Route",
   "DependsOn": "VPCGatewayAttachment",
   "Properties": {
    "RouteTableId": { "Ref": "K8sNodeRouteTable" },
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": { "Ref": "InternetGateway" }
   }
  },
  "K8sNodeSubnetRouteTableAssociation": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "SubnetId": { "Ref": "K8sNodeSubnet" },
    "RouteTableId": { "Ref": "K8sNodeRouteTable" }
   }
  },
  "K8sNodeNetworkAcL": {
   "Type": "AWS::EC2::NetworkAcl",
   "Properties": {
    "VpcId": { "Ref": "VPC" },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sNodeNetworkAcL" ] ] } } ]
   }
  },
  "InboundTCPK8sNodeNetworkAcLEntry": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "Properties": {
    "NetworkAclId": { "Ref": "K8sNodeNetworkAcL" },
    "RuleNumber": "100",
    "Protocol": "6",
    "RuleAction": "allow",
    "Egress": "false",
    "CidrBlock": "0.0.0.0/0",
    "PortRange": { "From": "0", "To": "65535" }
   }
  },
  "InboundUDPK8sNodeNetworkAcLEntry": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "Properties": {
    "NetworkAclId": { "Ref": "K8sNodeNetworkAcL" },
    "RuleNumber": "200",
    "Protocol": "17",
    "RuleAction": "allow",
    "Egress": "false",
    "CidrBlock": "0.0.0.0/0",
    "PortRange": { "From": "0", "To": "65535" }
   }
  },
  "InboundICMPK8sNodeNetworkAcLEntry": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "Properties": {
    "NetworkAclId": { "Ref": "K8sNodeNetworkAcL" },
    "RuleNumber": "300",
    "Protocol": "1",
    "Icmp": { "Code": "-1", "Type": "-1" },
    "RuleAction": "allow",
    "Egress": "false",
    "CidrBlock": "0.0.0.0/0"
   }
  },
  "OutboundTCPK8sNodeNetworkAcLEntry": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "Properties": {
    "NetworkAclId": { "Ref": "K8sNodeNetworkAcL" },
    "RuleNumber": "100",
    "Protocol": "6",
    "RuleAction": "allow",
    "Egress": "true",
    "CidrBlock": "0.0.0.0/0",
    "PortRange": { "From": "0", "To": "65535" }
   }
  },
  "OutboundUDPK8sNodeNetworkAcLEntry": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "Properties": {
    "NetworkAclId": { "Ref": "K8sNodeNetworkAcL" },
    "RuleNumber": "200",
    "Protocol": "17",
    "RuleAction": "allow",
    "Egress": "true",
    "CidrBlock": "0.0.0.0/0",
    "PortRange": { "From": "0", "To": "65535" }
   }
  },
  "OutboundICMPK8sNodeNetworkAcLEntry": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "Properties": {
    "NetworkAclId": { "Ref": "K8sNodeNetworkAcL" },
    "RuleNumber": "300",
    "Protocol": "1",
    "Icmp": { "Code": "-1", "Type": "-1" },
    "RuleAction": "allow",
    "Egress": "true",
    "CidrBlock": "0.0.0.0/0"
   }
  },
  "K8sNodeSubnetNetworkAcLAssociation": {
   "Type": "AWS::EC2::SubnetNetworkAclAssociation",
   "Properties": {
    "SubnetId": { "Ref": "K8sNodeSubnet" },
    "NetworkAclId": { "Ref": "K8sNodeNetworkAcL" }
   }
  },
  "K8sNodeSecurityGroup": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Security Group for K8s Nodes",
    "VpcId": { "Ref": "VPC" },
    "SecurityGroupEgress": [ { "IpProtocol": "-1", "CidrIp": "0.0.0.0/0" } ],
    "SecurityGroupIngress": [ { "IpProtocol": "-1", "CidrIp": "0.0.0.0/0" } ],
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sNodeSecurityGroup" ] ] } } ]
   }
  },
  "K8sMaster1EIP": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sMaster1EIP" ] ] } } ]
   }
  },
  "K8sWorker1EIP": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker1EIP" ] ] } } ]
   }
  },
  "K8sWorker2EIP": {
   "Type": "AWS::EC2::EIP",
   "Condition": "CreateWorkerNode2",
   "Properties": {
    "Domain": "vpc",
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker2EIP" ] ] } } ]
   }
  },
  "K8sWorker3EIP": {
   "Type": "AWS::EC2::EIP",
   "Condition": "CreateWorkerNode3",
   "Properties": {
    "Domain": "vpc",
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker3EIP" ] ] } } ]
   }
  },
  "K8sWorker4EIP": {
   "Type": "AWS::EC2::EIP",
   "Condition": "CreateWorkerNode4",
   "Properties": {
    "Domain": "vpc",
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker4EIP" ] ] } } ]
   }
  },
  "K8sWorker5EIP": {
   "Type": "AWS::EC2::EIP",
   "Condition": "CreateWorkerNode5",
   "Properties": {
    "Domain": "vpc",
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker5EIP" ] ] } } ]
   }
  },
  "K8sWorker6EIP": {
   "Type": "AWS::EC2::EIP",
   "Condition": "CreateWorkerNode6",
   "Properties": {
    "Domain": "vpc",
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker6EIP" ] ] } } ]
   }
  },
  "K8sWorker7EIP": {
   "Type": "AWS::EC2::EIP",
   "Condition": "CreateWorkerNode7",
   "Properties": {
    "Domain": "vpc",
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker7EIP" ] ] } } ]
   }
  },
  "K8sWorker8EIP": {
   "Type": "AWS::EC2::EIP",
   "Condition": "CreateWorkerNode8",
   "Properties": {
    "Domain": "vpc",
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker8EIP" ] ] } } ]
   }
  },
  "K8sWorker9EIP": {
   "Type": "AWS::EC2::EIP",
   "Condition": "CreateWorkerNode9",
   "Properties": {
    "Domain": "vpc",
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker9EIP" ] ] } } ]
   }
  },
  "K8sMaster1NetworkInterface": {
   "Type": "AWS::EC2::NetworkInterface",
   "Properties": {
    "Description": "Network Interface for K8s Master 1",
    "GroupSet": [ {"Ref": "K8sNodeSecurityGroup"} ],
    "SourceDestCheck": "false",
    "SubnetId": { "Ref": "K8sNodeSubnet" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sMaster1", "SufFix" ] } ] ] },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sMaster1NetworkInterface" ] ] } } ]
   }
  },
  "K8sWorker1NetworkInterface": {
   "Type": "AWS::EC2::NetworkInterface",
   "Properties": {
    "Description": "Network Interface for K8s Worker 1",
    "GroupSet": [ {"Ref": "K8sNodeSecurityGroup"} ],
    "SourceDestCheck": "false",
    "SubnetId": { "Ref": "K8sNodeSubnet" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker1", "SufFix" ] } ] ] },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker1NetworkInterface" ] ] } } ]
   }
  },
  "K8sWorker2NetworkInterface": {
   "Type": "AWS::EC2::NetworkInterface",
   "Condition": "CreateWorkerNode2",
   "Properties": {
    "Description": "Network Interface for K8s Worker 2",
    "GroupSet": [ {"Ref": "K8sNodeSecurityGroup"} ],
    "SourceDestCheck": "false",
    "SubnetId": { "Ref": "K8sNodeSubnet" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker2", "SufFix" ] } ] ] },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker2NetworkInterface" ] ] } } ]
   }
  },
  "K8sWorker3NetworkInterface": {
   "Type": "AWS::EC2::NetworkInterface",
   "Condition": "CreateWorkerNode3",
   "Properties": {
    "Description": "Network Interface for K8s Worker 3",
    "GroupSet": [ {"Ref": "K8sNodeSecurityGroup"} ],
    "SourceDestCheck": "false",
    "SubnetId": { "Ref": "K8sNodeSubnet" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker3", "SufFix" ] } ] ] },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker3NetworkInterface" ] ] } } ]
   }
  },
  "K8sWorker4NetworkInterface": {
   "Type": "AWS::EC2::NetworkInterface",
   "Condition": "CreateWorkerNode4",
   "Properties": {
    "Description": "Network Interface for K8s Worker 4",
    "GroupSet": [ {"Ref": "K8sNodeSecurityGroup"} ],
    "SourceDestCheck": "false",
    "SubnetId": { "Ref": "K8sNodeSubnet" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker4", "SufFix" ] } ] ] },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker4NetworkInterface" ] ] } } ]
   }
  },
  "K8sWorker5NetworkInterface": {
   "Type": "AWS::EC2::NetworkInterface",
   "Condition": "CreateWorkerNode5",
   "Properties": {
    "Description": "Network Interface for K8s Worker 5",
    "GroupSet": [ {"Ref": "K8sNodeSecurityGroup"} ],
    "SourceDestCheck": "false",
    "SubnetId": { "Ref": "K8sNodeSubnet" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker5", "SufFix" ] } ] ] },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker5NetworkInterface" ] ] } } ]
   }
  },
  "K8sWorker6NetworkInterface": {
   "Type": "AWS::EC2::NetworkInterface",
   "Condition": "CreateWorkerNode6",
   "Properties": {
    "Description": "Network Interface for K8s Worker 6",
    "GroupSet": [ {"Ref": "K8sNodeSecurityGroup"} ],
    "SourceDestCheck": "false",
    "SubnetId": { "Ref": "K8sNodeSubnet" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker6", "SufFix" ] } ] ] },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker6NetworkInterface" ] ] } } ]
   }
  },
  "K8sWorker7NetworkInterface": {
   "Type": "AWS::EC2::NetworkInterface",
   "Condition": "CreateWorkerNode7",
   "Properties": {
    "Description": "Network Interface for K8s Worker 7",
    "GroupSet": [ {"Ref": "K8sNodeSecurityGroup"} ],
    "SourceDestCheck": "false",
    "SubnetId": { "Ref": "K8sNodeSubnet" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker7", "SufFix" ] } ] ] },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker7NetworkInterface" ] ] } } ]
   }
  },
  "K8sWorker8NetworkInterface": {
   "Type": "AWS::EC2::NetworkInterface",
   "Condition": "CreateWorkerNode8",
   "Properties": {
    "Description": "Network Interface for K8s Worker 8",
    "GroupSet": [ {"Ref": "K8sNodeSecurityGroup"} ],
    "SourceDestCheck": "false",
    "SubnetId": { "Ref": "K8sNodeSubnet" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker8", "SufFix" ] } ] ] },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker8NetworkInterface" ] ] } } ]
   }
  },
  "K8sWorker9NetworkInterface": {
   "Type": "AWS::EC2::NetworkInterface",
   "Condition": "CreateWorkerNode9",
   "Properties": {
    "Description": "Network Interface for K8s Worker 9",
    "GroupSet": [ {"Ref": "K8sNodeSecurityGroup"} ],
    "SourceDestCheck": "false",
    "SubnetId": { "Ref": "K8sNodeSubnet" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker9", "SufFix" ] } ] ] },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker9NetworkInterface" ] ] } } ]
   }
  },
  "K8sMaster1EIPAssociation": {
   "Type": "AWS::EC2::EIPAssociation",
   "Properties": {
    "AllocationId": { "Fn::GetAtt": [ "K8sMaster1EIP", "AllocationId" ] },
    "NetworkInterfaceId": { "Ref": "K8sMaster1NetworkInterface" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sMaster1", "SufFix" ] } ] ] }
   }
  },
  "K8sWorker1EIPAssociation": {
   "Type": "AWS::EC2::EIPAssociation",
   "Properties": {
    "AllocationId": { "Fn::GetAtt": [ "K8sWorker1EIP", "AllocationId" ] },
    "NetworkInterfaceId": { "Ref": "K8sWorker1NetworkInterface" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker1", "SufFix" ] } ] ] }
   }
  },
  "K8sWorker2EIPAssociation": {
   "Type": "AWS::EC2::EIPAssociation",
   "Condition": "CreateWorkerNode2",
   "Properties": {
    "AllocationId": { "Fn::GetAtt": [ "K8sWorker2EIP", "AllocationId" ] },
    "NetworkInterfaceId": { "Ref": "K8sWorker2NetworkInterface" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker2", "SufFix" ] } ] ] }
   }
  },
  "K8sWorker3EIPAssociation": {
   "Type": "AWS::EC2::EIPAssociation",
   "Condition": "CreateWorkerNode3",
   "Properties": {
    "AllocationId": { "Fn::GetAtt": [ "K8sWorker3EIP", "AllocationId" ] },
    "NetworkInterfaceId": { "Ref": "K8sWorker3NetworkInterface" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker3", "SufFix" ] } ] ] }
   }
  },
  "K8sWorker4EIPAssociation": {
   "Type": "AWS::EC2::EIPAssociation",
   "Condition": "CreateWorkerNode4",
   "Properties": {
    "AllocationId": { "Fn::GetAtt": [ "K8sWorker4EIP", "AllocationId" ] },
    "NetworkInterfaceId": { "Ref": "K8sWorker4NetworkInterface" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker4", "SufFix" ] } ] ] }
   }
  },
  "K8sWorker5EIPAssociation": {
   "Type": "AWS::EC2::EIPAssociation",
   "Condition": "CreateWorkerNode5",
   "Properties": {
    "AllocationId": { "Fn::GetAtt": [ "K8sWorker5EIP", "AllocationId" ] },
    "NetworkInterfaceId": { "Ref": "K8sWorker5NetworkInterface" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker5", "SufFix" ] } ] ] }
   }
  },
  "K8sWorker6EIPAssociation": {
   "Type": "AWS::EC2::EIPAssociation",
   "Condition": "CreateWorkerNode6",
   "Properties": {
    "AllocationId": { "Fn::GetAtt": [ "K8sWorker6EIP", "AllocationId" ] },
    "NetworkInterfaceId": { "Ref": "K8sWorker6NetworkInterface" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker6", "SufFix" ] } ] ] }
   }
  },
  "K8sWorker7EIPAssociation": {
   "Type": "AWS::EC2::EIPAssociation",
   "Condition": "CreateWorkerNode7",
   "Properties": {
    "AllocationId": { "Fn::GetAtt": [ "K8sWorker7EIP", "AllocationId" ] },
    "NetworkInterfaceId": { "Ref": "K8sWorker7NetworkInterface" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker7", "SufFix" ] } ] ] }
   }
  },
  "K8sWorker8EIPAssociation": {
   "Type": "AWS::EC2::EIPAssociation",
   "Condition": "CreateWorkerNode8",
   "Properties": {
    "AllocationId": { "Fn::GetAtt": [ "K8sWorker8EIP", "AllocationId" ] },
    "NetworkInterfaceId": { "Ref": "K8sWorker8NetworkInterface" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker8", "SufFix" ] } ] ] }
   }
  },
  "K8sWorker9EIPAssociation": {
   "Type": "AWS::EC2::EIPAssociation",
   "Condition": "CreateWorkerNode9",
   "Properties": {
    "AllocationId": { "Fn::GetAtt": [ "K8sWorker9EIP", "AllocationId" ] },
    "NetworkInterfaceId": { "Ref": "K8sWorker9NetworkInterface" },
    "PrivateIpAddress": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker9", "SufFix" ] } ] ] }
   }
  },

  "CafeDNSRecord": {
   "Type": "AWS::Route53::RecordSet",
   "Properties": {
    "HostedZoneName": { "Fn::Join": [ "", [ { "Ref": "ParentDomainName" }, "." ] ] },
    "Name": { "Fn::Join": [ "", [ "cafe.", { "Ref": "ParentDomainName" }, "." ] ] },
    "Type": "A",
    "TTL": "22",
    "ResourceRecords": [ { "Ref": "K8sMaster1EIP" } ]
   }
  },

  "K8sMaster1Instance": {
   "Type": "AWS::EC2::Instance",
   "Properties": {
    "ImageId": { "Fn::If": [ "DefaultK8sNodeImageID", { "Fn::FindInMap": [ "RegionAMI", { "Ref": "AWS::Region" }, { "Ref": "K8sNodeImageType" } ] }, { "Ref": "K8sNodeImageID" } ] },
    "InstanceType": { "Ref": "K8sNodeInstanceType" },
    "NetworkInterfaces": [ { "NetworkInterfaceId": {"Ref": "K8sMaster1NetworkInterface"}, "DeviceIndex": "0" } ],
    "KeyName": { "Ref": "EC2SSHKeyPair" },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sMaster1Instance" ] ] } } ],
    "UserData": { "Fn::Base64": { "Fn::Join": [ "", [
     "#!/bin/bash -xe", "\n",
     "touch /home/ubuntu/UserData`date +%Y%m%d%H%M%S`.Access\n",

     "sudo printf \"", { "Ref": "K8sSSHPrivateKey" }, "\" >> /home/ubuntu/.ssh/id_rsa\n",
     "chown ubuntu:ubuntu /home/ubuntu/.ssh/id_rsa\n",
     "chmod 600 /home/ubuntu/.ssh/id_rsa\n",
     "sudo printf \"", { "Ref": "K8sSSHPublicKey" }, "\" >> /home/ubuntu/.ssh/id_rsa.pub\n",
     "chown ubuntu:ubuntu /home/ubuntu/.ssh/id_rsa.pub\n",
     "chmod 600 /home/ubuntu/.ssh/id_rsa.pub\n",
     "timedatectl set-timezone \"", { "Ref": "TimeZone" }, "\"\n",

     "declare -a file_url\n",
     "declare -a file_name\n",
     "declare -a file_acl\n",
     "declare -a file_owner\n",
     "declare -a file_result\n",

     "file_url[0]=\"", { "Ref": "OSPreparationScript" }, "\"\n",
     "file_name[0]=\"/home/ubuntu/OSPreparationScript\"\n",
     "file_acl[0]=\"777\"\n",
     "file_owner[0]=\"ubuntu:ubuntu\"\n",

     "file_url[1]=\"", { "Ref": "DockerPreparationScript" }, "\"\n",
     "file_name[1]=\"/home/ubuntu/DockerPreparationScript\"\n",
     "file_acl[1]=\"777\"\n",
     "file_owner[1]=\"ubuntu:ubuntu\"\n",

     "file_url[2]=\"", { "Ref": "CommonK8sPreparationScript" }, "\"\n",
     "file_name[2]=\"/home/ubuntu/CommonK8sPreparationScript\"\n",
     "file_acl[2]=\"777\"\n",
     "file_owner[2]=\"ubuntu:ubuntu\"\n",

     "file_url[3]=\"", { "Ref": "K8sMasterPreparationScript" }, "\"\n",
     "file_name[3]=\"/home/ubuntu/K8sMasterPreparationScript\"\n",
     "file_acl[3]=\"777\"\n",
     "file_owner[3]=\"ubuntu:ubuntu\"\n",

     "file_url[4]=\"", { "Ref": "K8sWorkerPreparationScript" }, "\"\n",
     "file_name[4]=\"/home/ubuntu/K8sWorkerPreparationScript\"\n",
     "file_acl[4]=\"777\"\n",
     "file_owner[4]=\"ubuntu:ubuntu\"\n",

     "file_url[5]=\"", { "Ref": "K8sServicePreparationScript" }, "\"\n",
     "file_name[5]=\"/home/ubuntu/K8sServicePreparationScript\"\n",
     "file_acl[5]=\"777\"\n",
     "file_owner[5]=\"ubuntu:ubuntu\"\n",

     "file_url[6]=\"", { "Ref": "CompileNGINXPlusScript" }, "\"\n",
     "file_name[6]=\"/home/ubuntu/CompileNGINXPlusScript\"\n",
     "file_acl[6]=\"777\"\n",
     "file_owner[6]=\"ubuntu:ubuntu\"\n",

     "file_url[7]=\"", { "Ref": "NGINXPlusIngressScript" }, "\"\n",
     "file_name[7]=\"/home/ubuntu/NGINXPlusIngressScript\"\n",
     "file_acl[7]=\"777\"\n",
     "file_owner[7]=\"ubuntu:ubuntu\"\n",

     "file_url[8]=\"", { "Ref": "ApplicationServiceScript" }, "\"\n",
     "file_name[8]=\"/home/ubuntu/ApplicationServiceScript\"\n",
     "file_acl[8]=\"777\"\n",
     "file_owner[8]=\"ubuntu:ubuntu\"\n",

     "max_counter=8\n",

     "URLRegEx=\"^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+((\\-|\\.)[a-z0-9]+)*\\.[a-z]{2,}(:[0-9]{1,5})?(\\/.*)*$\"\n",

     "for counter in $(seq 0 $max_counter); do\n",
     " if [[ ${file_url[$counter]} =~ $URLRegEx ]] ; then\n",
     "  file_result[$counter]=$(/usr/bin/curl -sk -w \"%{http_code}\" ${file_url[$counter]} -o ${file_name[$counter]})\n",
     "  if [[ ${file_result[$counter]} == 200 ]]; then\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; ${file_name[$counter]} download complete.\"\n",
     "   chmod ${file_acl[$counter]} ${file_name[$counter]}\n",
     "   chown ${file_owner[$counter]} ${file_name[$counter]}\n",
     "  else\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; Failed to download ${file_name[$counter]} ; Continuing . . .\"\n",
     "  fi\n",
     " else\n",
     "  echo \"$counter ; Reference to the ${file_name[$counter]} was not a URL ; Continuing . . .\"\n",
     " fi\n",
     "done\n",

     "sudo bash /home/ubuntu/OSPreparationScript\n",
     "sudo bash /home/ubuntu/DockerPreparationScript\n",
     "sudo bash /home/ubuntu/CommonK8sPreparationScript\n",
     "sudo bash /home/ubuntu/K8sMasterPreparationScript ", { "Fn::FindInMap": [ "IPAddress", "K8sPod", "CIDR" ] }, " ", { "Fn::FindInMap": [ "IPAddress", "K8sService", "CIDR" ] }, " ", { "Ref": "ClusterNetworkConfiguration" }, "\n",
     "sudo bash /home/ubuntu/K8sWorkerPreparationScript ",
      { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker1", "SufFix" ] } ] ] },
      { "Fn::If": [ "CreateWorkerNode2", { "Fn::Join": [ "", [ " ", { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker2", "SufFix" ] } ] ] } ] ] }, "" ] },
      { "Fn::If": [ "CreateWorkerNode3", { "Fn::Join": [ "", [ " ", { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker3", "SufFix" ] } ] ] } ] ] }, "" ] },
      { "Fn::If": [ "CreateWorkerNode4", { "Fn::Join": [ "", [ " ", { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker4", "SufFix" ] } ] ] } ] ] }, "" ] },
      { "Fn::If": [ "CreateWorkerNode5", { "Fn::Join": [ "", [ " ", { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker5", "SufFix" ] } ] ] } ] ] }, "" ] },
      { "Fn::If": [ "CreateWorkerNode6", { "Fn::Join": [ "", [ " ", { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker6", "SufFix" ] } ] ] } ] ] }, "" ] },
      { "Fn::If": [ "CreateWorkerNode7", { "Fn::Join": [ "", [ " ", { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker7", "SufFix" ] } ] ] } ] ] }, "" ] },
      { "Fn::If": [ "CreateWorkerNode8", { "Fn::Join": [ "", [ " ", { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker8", "SufFix" ] } ] ] } ] ] }, "" ] },
      { "Fn::If": [ "CreateWorkerNode9", { "Fn::Join": [ "", [ " ", { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sNode", "InFix" ] }, { "Fn::FindInMap": [ "IPAddress", "K8sWorker9", "SufFix" ] } ] ] } ] ] }, "" ] },
     "\n",
     "sudo bash /home/ubuntu/K8sServicePreparationScript\n",

     { "Fn::If": [ "SkipNGINXCompilation", "", { "Fn::Join": [ "", [
      "sudo printf \"", { "Ref": "NGINXRepositoryCertificate" }, "\" >> /home/ubuntu/nginx-repo.crt\n",
      "chown ubuntu:ubuntu /home/ubuntu/nginx-repo.crt\n",
      "chmod 600 /home/ubuntu/nginx-repo.crt\n",
      "sudo printf \"", { "Ref": "NGINXRepositoryPrivateKey" }, "\" >> /home/ubuntu/nginx-repo.key\n",
      "chown ubuntu:ubuntu /home/ubuntu/nginx-repo.key\n",
      "chmod 600 /home/ubuntu/nginx-repo.key\n"
     ] ] } ] },
     "sudo bash /home/ubuntu/CompileNGINXPlusScript ", { "Ref": "DockerHubRepositoryName" }, " ", { "Ref": "NGINXPlusVersion" }, " ", { "Ref": "SkipNGINXPlusCompilation" }, " ", { "Ref": "DockerHubUserID" }, " ", { "Ref": "DockerHubPassword" }, "\n",
     "runuser -u ubuntu -- bash /home/ubuntu/NGINXPlusIngressScript ", { "Ref": "DockerHubRepositoryName" }, " ", { "Ref": "NGINXPlusVersion" }, "\n",

     "runuser -u ubuntu -- bash /home/ubuntu/ApplicationServiceScript ", { "Fn::Join": [ "", [ "cafe.", { "Ref": "ParentDomainName" } ] ] }, "\n",

     "\n"
    ]]}}
   }
  },
  "K8sWorker1Instance": {
   "Type": "AWS::EC2::Instance",
   "Properties": {
    "ImageId": { "Fn::If": [ "DefaultK8sNodeImageID", { "Fn::FindInMap": [ "RegionAMI", { "Ref": "AWS::Region" }, { "Ref": "K8sNodeImageType" } ] }, { "Ref": "K8sNodeImageID" } ] },
    "InstanceType": { "Ref": "K8sNodeInstanceType" },
    "NetworkInterfaces": [ { "NetworkInterfaceId": {"Ref": "K8sWorker1NetworkInterface"}, "DeviceIndex": "0" } ],
    "KeyName": { "Ref": "EC2SSHKeyPair" },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker1Instance" ] ] } } ],
    "UserData": { "Fn::Base64": { "Fn::Join": [ "", [
     "#!/bin/bash -xe", "\n",
     "touch /home/ubuntu/UserData`date +%Y%m%d%H%M%S`.Access\n",

     "sudo printf \"", { "Ref": "K8sSSHPublicKey" }, "\" >> /home/ubuntu/.ssh/authorized_keys\n",
     "timedatectl set-timezone \"", { "Ref": "TimeZone" }, "\"\n",

     "declare -a file_url\n",
     "declare -a file_name\n",
     "declare -a file_acl\n",
     "declare -a file_owner\n",
     "declare -a file_result\n",

     "file_url[0]=\"", { "Ref": "OSPreparationScript" }, "\"\n",
     "file_name[0]=\"/home/ubuntu/OSPreparationScript\"\n",
     "file_acl[0]=\"777\"\n",
     "file_owner[0]=\"ubuntu:ubuntu\"\n",

     "file_url[1]=\"", { "Ref": "DockerPreparationScript" }, "\"\n",
     "file_name[1]=\"/home/ubuntu/DockerPreparationScript\"\n",
     "file_acl[1]=\"777\"\n",
     "file_owner[1]=\"ubuntu:ubuntu\"\n",

     "file_url[2]=\"", { "Ref": "CommonK8sPreparationScript" }, "\"\n",
     "file_name[2]=\"/home/ubuntu/CommonK8sPreparationScript\"\n",
     "file_acl[2]=\"777\"\n",
     "file_owner[2]=\"ubuntu:ubuntu\"\n",

     "max_counter=2\n",

     "URLRegEx=\"^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+((\\-|\\.)[a-z0-9]+)*\\.[a-z]{2,}(:[0-9]{1,5})?(\\/.*)*$\"\n",

     "for counter in $(seq 0 $max_counter); do\n",
     " if [[ ${file_url[$counter]} =~ $URLRegEx ]] ; then\n",
     "  file_result[$counter]=$(/usr/bin/curl -sk -w \"%{http_code}\" ${file_url[$counter]} -o ${file_name[$counter]})\n",
     "  if [[ ${file_result[$counter]} == 200 ]]; then\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; ${file_name[$counter]} download complete.\"\n",
     "   chmod ${file_acl[$counter]} ${file_name[$counter]}\n",
     "   chown ${file_owner[$counter]} ${file_name[$counter]}\n",
     "  else\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; Failed to download ${file_name[$counter]} ; Continuing . . .\"\n",
     "  fi\n",
     " else\n",
     "  echo \"$counter ; Reference to the ${file_name[$counter]} was not a URL ; Continuing . . .\"\n",
     " fi\n",
     "done\n",

     "sudo bash /home/ubuntu/OSPreparationScript\n",
     "sudo bash /home/ubuntu/DockerPreparationScript\n",
     "sudo bash /home/ubuntu/CommonK8sPreparationScript\n",

     "\n"
    ]]}}
   }
  },
  "K8sWorker2Instance": {
   "Type": "AWS::EC2::Instance",
   "Condition": "CreateWorkerNode2",
   "Properties": {
    "ImageId": { "Fn::If": [ "DefaultK8sNodeImageID", { "Fn::FindInMap": [ "RegionAMI", { "Ref": "AWS::Region" }, { "Ref": "K8sNodeImageType" } ] }, { "Ref": "K8sNodeImageID" } ] },
    "InstanceType": { "Ref": "K8sNodeInstanceType" },
    "NetworkInterfaces": [ { "NetworkInterfaceId": {"Ref": "K8sWorker2NetworkInterface"}, "DeviceIndex": "0" } ],
    "KeyName": { "Ref": "EC2SSHKeyPair" },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker2Instance" ] ] } } ],
    "UserData": { "Fn::Base64": { "Fn::Join": [ "", [
     "#!/bin/bash -xe", "\n",
     "touch /home/ubuntu/UserData`date +%Y%m%d%H%M%S`.Access\n",

     "sudo printf \"", { "Ref": "K8sSSHPublicKey" }, "\" >> /home/ubuntu/.ssh/authorized_keys\n",
     "timedatectl set-timezone \"", { "Ref": "TimeZone" }, "\"\n",

     "declare -a file_url\n",
     "declare -a file_name\n",
     "declare -a file_acl\n",
     "declare -a file_owner\n",
     "declare -a file_result\n",

     "file_url[0]=\"", { "Ref": "OSPreparationScript" }, "\"\n",
     "file_name[0]=\"/home/ubuntu/OSPreparationScript\"\n",
     "file_acl[0]=\"777\"\n",
     "file_owner[0]=\"ubuntu:ubuntu\"\n",

     "file_url[1]=\"", { "Ref": "DockerPreparationScript" }, "\"\n",
     "file_name[1]=\"/home/ubuntu/DockerPreparationScript\"\n",
     "file_acl[1]=\"777\"\n",
     "file_owner[1]=\"ubuntu:ubuntu\"\n",

     "file_url[2]=\"", { "Ref": "CommonK8sPreparationScript" }, "\"\n",
     "file_name[2]=\"/home/ubuntu/CommonK8sPreparationScript\"\n",
     "file_acl[2]=\"777\"\n",
     "file_owner[2]=\"ubuntu:ubuntu\"\n",

     "max_counter=2\n",

     "URLRegEx=\"^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+((\\-|\\.)[a-z0-9]+)*\\.[a-z]{2,}(:[0-9]{1,5})?(\\/.*)*$\"\n",

     "for counter in $(seq 0 $max_counter); do\n",
     " if [[ ${file_url[$counter]} =~ $URLRegEx ]] ; then\n",
     "  file_result[$counter]=$(/usr/bin/curl -sk -w \"%{http_code}\" ${file_url[$counter]} -o ${file_name[$counter]})\n",
     "  if [[ ${file_result[$counter]} == 200 ]]; then\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; ${file_name[$counter]} download complete.\"\n",
     "   chmod ${file_acl[$counter]} ${file_name[$counter]}\n",
     "   chown ${file_owner[$counter]} ${file_name[$counter]}\n",
     "  else\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; Failed to download ${file_name[$counter]} ; Continuing . . .\"\n",
     "  fi\n",
     " else\n",
     "  echo \"$counter ; Reference to the ${file_name[$counter]} was not a URL ; Continuing . . .\"\n",
     " fi\n",
     "done\n",

     "sudo bash /home/ubuntu/OSPreparationScript\n",
     "sudo bash /home/ubuntu/DockerPreparationScript\n",
     "sudo bash /home/ubuntu/CommonK8sPreparationScript\n",

     "\n"
    ]]}}
   }
  },
  "K8sWorker3Instance": {
   "Type": "AWS::EC2::Instance",
   "Condition": "CreateWorkerNode3",
   "Properties": {
    "ImageId": { "Fn::If": [ "DefaultK8sNodeImageID", { "Fn::FindInMap": [ "RegionAMI", { "Ref": "AWS::Region" }, { "Ref": "K8sNodeImageType" } ] }, { "Ref": "K8sNodeImageID" } ] },
    "InstanceType": { "Ref": "K8sNodeInstanceType" },
    "NetworkInterfaces": [ { "NetworkInterfaceId": {"Ref": "K8sWorker3NetworkInterface"}, "DeviceIndex": "0" } ],
    "KeyName": { "Ref": "EC2SSHKeyPair" },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker3Instance" ] ] } } ],
    "UserData": { "Fn::Base64": { "Fn::Join": [ "", [
     "#!/bin/bash -xe", "\n",
     "touch /home/ubuntu/UserData`date +%Y%m%d%H%M%S`.Access\n",

     "sudo printf \"", { "Ref": "K8sSSHPublicKey" }, "\" >> /home/ubuntu/.ssh/authorized_keys\n",
     "timedatectl set-timezone \"", { "Ref": "TimeZone" }, "\"\n",

     "declare -a file_url\n",
     "declare -a file_name\n",
     "declare -a file_acl\n",
     "declare -a file_owner\n",
     "declare -a file_result\n",

     "file_url[0]=\"", { "Ref": "OSPreparationScript" }, "\"\n",
     "file_name[0]=\"/home/ubuntu/OSPreparationScript\"\n",
     "file_acl[0]=\"777\"\n",
     "file_owner[0]=\"ubuntu:ubuntu\"\n",

     "file_url[1]=\"", { "Ref": "DockerPreparationScript" }, "\"\n",
     "file_name[1]=\"/home/ubuntu/DockerPreparationScript\"\n",
     "file_acl[1]=\"777\"\n",
     "file_owner[1]=\"ubuntu:ubuntu\"\n",

     "file_url[2]=\"", { "Ref": "CommonK8sPreparationScript" }, "\"\n",
     "file_name[2]=\"/home/ubuntu/CommonK8sPreparationScript\"\n",
     "file_acl[2]=\"777\"\n",
     "file_owner[2]=\"ubuntu:ubuntu\"\n",

     "max_counter=2\n",

     "URLRegEx=\"^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+((\\-|\\.)[a-z0-9]+)*\\.[a-z]{2,}(:[0-9]{1,5})?(\\/.*)*$\"\n",

     "for counter in $(seq 0 $max_counter); do\n",
     " if [[ ${file_url[$counter]} =~ $URLRegEx ]] ; then\n",
     "  file_result[$counter]=$(/usr/bin/curl -sk -w \"%{http_code}\" ${file_url[$counter]} -o ${file_name[$counter]})\n",
     "  if [[ ${file_result[$counter]} == 200 ]]; then\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; ${file_name[$counter]} download complete.\"\n",
     "   chmod ${file_acl[$counter]} ${file_name[$counter]}\n",
     "   chown ${file_owner[$counter]} ${file_name[$counter]}\n",
     "  else\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; Failed to download ${file_name[$counter]} ; Continuing . . .\"\n",
     "  fi\n",
     " else\n",
     "  echo \"$counter ; Reference to the ${file_name[$counter]} was not a URL ; Continuing . . .\"\n",
     " fi\n",
     "done\n",

     "sudo bash /home/ubuntu/OSPreparationScript\n",
     "sudo bash /home/ubuntu/DockerPreparationScript\n",
     "sudo bash /home/ubuntu/CommonK8sPreparationScript\n",

     "\n"
    ]]}}
   }
  },
  "K8sWorker4Instance": {
   "Type": "AWS::EC2::Instance",
   "Condition": "CreateWorkerNode4",
   "Properties": {
    "ImageId": { "Fn::If": [ "DefaultK8sNodeImageID", { "Fn::FindInMap": [ "RegionAMI", { "Ref": "AWS::Region" }, { "Ref": "K8sNodeImageType" } ] }, { "Ref": "K8sNodeImageID" } ] },
    "InstanceType": { "Ref": "K8sNodeInstanceType" },
    "NetworkInterfaces": [ { "NetworkInterfaceId": {"Ref": "K8sWorker4NetworkInterface"}, "DeviceIndex": "0" } ],
    "KeyName": { "Ref": "EC2SSHKeyPair" },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker4Instance" ] ] } } ],
    "UserData": { "Fn::Base64": { "Fn::Join": [ "", [
     "#!/bin/bash -xe", "\n",
     "touch /home/ubuntu/UserData`date +%Y%m%d%H%M%S`.Access\n",

     "sudo printf \"", { "Ref": "K8sSSHPublicKey" }, "\" >> /home/ubuntu/.ssh/authorized_keys\n",
     "timedatectl set-timezone \"", { "Ref": "TimeZone" }, "\"\n",

     "declare -a file_url\n",
     "declare -a file_name\n",
     "declare -a file_acl\n",
     "declare -a file_owner\n",
     "declare -a file_result\n",

     "file_url[0]=\"", { "Ref": "OSPreparationScript" }, "\"\n",
     "file_name[0]=\"/home/ubuntu/OSPreparationScript\"\n",
     "file_acl[0]=\"777\"\n",
     "file_owner[0]=\"ubuntu:ubuntu\"\n",

     "file_url[1]=\"", { "Ref": "DockerPreparationScript" }, "\"\n",
     "file_name[1]=\"/home/ubuntu/DockerPreparationScript\"\n",
     "file_acl[1]=\"777\"\n",
     "file_owner[1]=\"ubuntu:ubuntu\"\n",

     "file_url[2]=\"", { "Ref": "CommonK8sPreparationScript" }, "\"\n",
     "file_name[2]=\"/home/ubuntu/CommonK8sPreparationScript\"\n",
     "file_acl[2]=\"777\"\n",
     "file_owner[2]=\"ubuntu:ubuntu\"\n",

     "max_counter=2\n",

     "URLRegEx=\"^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+((\\-|\\.)[a-z0-9]+)*\\.[a-z]{2,}(:[0-9]{1,5})?(\\/.*)*$\"\n",

     "for counter in $(seq 0 $max_counter); do\n",
     " if [[ ${file_url[$counter]} =~ $URLRegEx ]] ; then\n",
     "  file_result[$counter]=$(/usr/bin/curl -sk -w \"%{http_code}\" ${file_url[$counter]} -o ${file_name[$counter]})\n",
     "  if [[ ${file_result[$counter]} == 200 ]]; then\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; ${file_name[$counter]} download complete.\"\n",
     "   chmod ${file_acl[$counter]} ${file_name[$counter]}\n",
     "   chown ${file_owner[$counter]} ${file_name[$counter]}\n",
     "  else\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; Failed to download ${file_name[$counter]} ; Continuing . . .\"\n",
     "  fi\n",
     " else\n",
     "  echo \"$counter ; Reference to the ${file_name[$counter]} was not a URL ; Continuing . . .\"\n",
     " fi\n",
     "done\n",

     "sudo bash /home/ubuntu/OSPreparationScript\n",
     "sudo bash /home/ubuntu/DockerPreparationScript\n",
     "sudo bash /home/ubuntu/CommonK8sPreparationScript\n",

     "\n"
    ]]}}
   }
  },
  "K8sWorker5Instance": {
   "Type": "AWS::EC2::Instance",
   "Condition": "CreateWorkerNode5",
   "Properties": {
    "ImageId": { "Fn::If": [ "DefaultK8sNodeImageID", { "Fn::FindInMap": [ "RegionAMI", { "Ref": "AWS::Region" }, { "Ref": "K8sNodeImageType" } ] }, { "Ref": "K8sNodeImageID" } ] },
    "InstanceType": { "Ref": "K8sNodeInstanceType" },
    "NetworkInterfaces": [ { "NetworkInterfaceId": {"Ref": "K8sWorker5NetworkInterface"}, "DeviceIndex": "0" } ],
    "KeyName": { "Ref": "EC2SSHKeyPair" },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker5Instance" ] ] } } ],
    "UserData": { "Fn::Base64": { "Fn::Join": [ "", [
     "#!/bin/bash -xe", "\n",
     "touch /home/ubuntu/UserData`date +%Y%m%d%H%M%S`.Access\n",

     "sudo printf \"", { "Ref": "K8sSSHPublicKey" }, "\" >> /home/ubuntu/.ssh/authorized_keys\n",
     "timedatectl set-timezone \"", { "Ref": "TimeZone" }, "\"\n",

     "declare -a file_url\n",
     "declare -a file_name\n",
     "declare -a file_acl\n",
     "declare -a file_owner\n",
     "declare -a file_result\n",

     "file_url[0]=\"", { "Ref": "OSPreparationScript" }, "\"\n",
     "file_name[0]=\"/home/ubuntu/OSPreparationScript\"\n",
     "file_acl[0]=\"777\"\n",
     "file_owner[0]=\"ubuntu:ubuntu\"\n",

     "file_url[1]=\"", { "Ref": "DockerPreparationScript" }, "\"\n",
     "file_name[1]=\"/home/ubuntu/DockerPreparationScript\"\n",
     "file_acl[1]=\"777\"\n",
     "file_owner[1]=\"ubuntu:ubuntu\"\n",

     "file_url[2]=\"", { "Ref": "CommonK8sPreparationScript" }, "\"\n",
     "file_name[2]=\"/home/ubuntu/CommonK8sPreparationScript\"\n",
     "file_acl[2]=\"777\"\n",
     "file_owner[2]=\"ubuntu:ubuntu\"\n",

     "max_counter=2\n",

     "URLRegEx=\"^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+((\\-|\\.)[a-z0-9]+)*\\.[a-z]{2,}(:[0-9]{1,5})?(\\/.*)*$\"\n",

     "for counter in $(seq 0 $max_counter); do\n",
     " if [[ ${file_url[$counter]} =~ $URLRegEx ]] ; then\n",
     "  file_result[$counter]=$(/usr/bin/curl -sk -w \"%{http_code}\" ${file_url[$counter]} -o ${file_name[$counter]})\n",
     "  if [[ ${file_result[$counter]} == 200 ]]; then\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; ${file_name[$counter]} download complete.\"\n",
     "   chmod ${file_acl[$counter]} ${file_name[$counter]}\n",
     "   chown ${file_owner[$counter]} ${file_name[$counter]}\n",
     "  else\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; Failed to download ${file_name[$counter]} ; Continuing . . .\"\n",
     "  fi\n",
     " else\n",
     "  echo \"$counter ; Reference to the ${file_name[$counter]} was not a URL ; Continuing . . .\"\n",
     " fi\n",
     "done\n",

     "sudo bash /home/ubuntu/OSPreparationScript\n",
     "sudo bash /home/ubuntu/DockerPreparationScript\n",
     "sudo bash /home/ubuntu/CommonK8sPreparationScript\n",

     "\n"
    ]]}}
   }
  },
  "K8sWorker6Instance": {
   "Type": "AWS::EC2::Instance",
   "Condition": "CreateWorkerNode6",
   "Properties": {
    "ImageId": { "Fn::If": [ "DefaultK8sNodeImageID", { "Fn::FindInMap": [ "RegionAMI", { "Ref": "AWS::Region" }, { "Ref": "K8sNodeImageType" } ] }, { "Ref": "K8sNodeImageID" } ] },
    "InstanceType": { "Ref": "K8sNodeInstanceType" },
    "NetworkInterfaces": [ { "NetworkInterfaceId": {"Ref": "K8sWorker6NetworkInterface"}, "DeviceIndex": "0" } ],
    "KeyName": { "Ref": "EC2SSHKeyPair" },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker6Instance" ] ] } } ],
    "UserData": { "Fn::Base64": { "Fn::Join": [ "", [
     "#!/bin/bash -xe", "\n",
     "touch /home/ubuntu/UserData`date +%Y%m%d%H%M%S`.Access\n",

     "sudo printf \"", { "Ref": "K8sSSHPublicKey" }, "\" >> /home/ubuntu/.ssh/authorized_keys\n",
     "timedatectl set-timezone \"", { "Ref": "TimeZone" }, "\"\n",

     "declare -a file_url\n",
     "declare -a file_name\n",
     "declare -a file_acl\n",
     "declare -a file_owner\n",
     "declare -a file_result\n",

     "file_url[0]=\"", { "Ref": "OSPreparationScript" }, "\"\n",
     "file_name[0]=\"/home/ubuntu/OSPreparationScript\"\n",
     "file_acl[0]=\"777\"\n",
     "file_owner[0]=\"ubuntu:ubuntu\"\n",

     "file_url[1]=\"", { "Ref": "DockerPreparationScript" }, "\"\n",
     "file_name[1]=\"/home/ubuntu/DockerPreparationScript\"\n",
     "file_acl[1]=\"777\"\n",
     "file_owner[1]=\"ubuntu:ubuntu\"\n",

     "file_url[2]=\"", { "Ref": "CommonK8sPreparationScript" }, "\"\n",
     "file_name[2]=\"/home/ubuntu/CommonK8sPreparationScript\"\n",
     "file_acl[2]=\"777\"\n",
     "file_owner[2]=\"ubuntu:ubuntu\"\n",

     "max_counter=2\n",

     "URLRegEx=\"^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+((\\-|\\.)[a-z0-9]+)*\\.[a-z]{2,}(:[0-9]{1,5})?(\\/.*)*$\"\n",

     "for counter in $(seq 0 $max_counter); do\n",
     " if [[ ${file_url[$counter]} =~ $URLRegEx ]] ; then\n",
     "  file_result[$counter]=$(/usr/bin/curl -sk -w \"%{http_code}\" ${file_url[$counter]} -o ${file_name[$counter]})\n",
     "  if [[ ${file_result[$counter]} == 200 ]]; then\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; ${file_name[$counter]} download complete.\"\n",
     "   chmod ${file_acl[$counter]} ${file_name[$counter]}\n",
     "   chown ${file_owner[$counter]} ${file_name[$counter]}\n",
     "  else\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; Failed to download ${file_name[$counter]} ; Continuing . . .\"\n",
     "  fi\n",
     " else\n",
     "  echo \"$counter ; Reference to the ${file_name[$counter]} was not a URL ; Continuing . . .\"\n",
     " fi\n",
     "done\n",

     "sudo bash /home/ubuntu/OSPreparationScript\n",
     "sudo bash /home/ubuntu/DockerPreparationScript\n",
     "sudo bash /home/ubuntu/CommonK8sPreparationScript\n",

     "\n"
    ]]}}
   }
  },
  "K8sWorker7Instance": {
   "Type": "AWS::EC2::Instance",
   "Condition": "CreateWorkerNode7",
   "Properties": {
    "ImageId": { "Fn::If": [ "DefaultK8sNodeImageID", { "Fn::FindInMap": [ "RegionAMI", { "Ref": "AWS::Region" }, { "Ref": "K8sNodeImageType" } ] }, { "Ref": "K8sNodeImageID" } ] },
    "InstanceType": { "Ref": "K8sNodeInstanceType" },
    "NetworkInterfaces": [ { "NetworkInterfaceId": {"Ref": "K8sWorker7NetworkInterface"}, "DeviceIndex": "0" } ],
    "KeyName": { "Ref": "EC2SSHKeyPair" },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker7Instance" ] ] } } ],
    "UserData": { "Fn::Base64": { "Fn::Join": [ "", [
     "#!/bin/bash -xe", "\n",
     "touch /home/ubuntu/UserData`date +%Y%m%d%H%M%S`.Access\n",

     "sudo printf \"", { "Ref": "K8sSSHPublicKey" }, "\" >> /home/ubuntu/.ssh/authorized_keys\n",
     "timedatectl set-timezone \"", { "Ref": "TimeZone" }, "\"\n",

     "declare -a file_url\n",
     "declare -a file_name\n",
     "declare -a file_acl\n",
     "declare -a file_owner\n",
     "declare -a file_result\n",

     "file_url[0]=\"", { "Ref": "OSPreparationScript" }, "\"\n",
     "file_name[0]=\"/home/ubuntu/OSPreparationScript\"\n",
     "file_acl[0]=\"777\"\n",
     "file_owner[0]=\"ubuntu:ubuntu\"\n",

     "file_url[1]=\"", { "Ref": "DockerPreparationScript" }, "\"\n",
     "file_name[1]=\"/home/ubuntu/DockerPreparationScript\"\n",
     "file_acl[1]=\"777\"\n",
     "file_owner[1]=\"ubuntu:ubuntu\"\n",

     "file_url[2]=\"", { "Ref": "CommonK8sPreparationScript" }, "\"\n",
     "file_name[2]=\"/home/ubuntu/CommonK8sPreparationScript\"\n",
     "file_acl[2]=\"777\"\n",
     "file_owner[2]=\"ubuntu:ubuntu\"\n",

     "max_counter=2\n",

     "URLRegEx=\"^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+((\\-|\\.)[a-z0-9]+)*\\.[a-z]{2,}(:[0-9]{1,5})?(\\/.*)*$\"\n",

     "for counter in $(seq 0 $max_counter); do\n",
     " if [[ ${file_url[$counter]} =~ $URLRegEx ]] ; then\n",
     "  file_result[$counter]=$(/usr/bin/curl -sk -w \"%{http_code}\" ${file_url[$counter]} -o ${file_name[$counter]})\n",
     "  if [[ ${file_result[$counter]} == 200 ]]; then\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; ${file_name[$counter]} download complete.\"\n",
     "   chmod ${file_acl[$counter]} ${file_name[$counter]}\n",
     "   chown ${file_owner[$counter]} ${file_name[$counter]}\n",
     "  else\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; Failed to download ${file_name[$counter]} ; Continuing . . .\"\n",
     "  fi\n",
     " else\n",
     "  echo \"$counter ; Reference to the ${file_name[$counter]} was not a URL ; Continuing . . .\"\n",
     " fi\n",
     "done\n",

     "sudo bash /home/ubuntu/OSPreparationScript\n",
     "sudo bash /home/ubuntu/DockerPreparationScript\n",
     "sudo bash /home/ubuntu/CommonK8sPreparationScript\n",

     "\n"
    ]]}}
   }
  },
  "K8sWorker8Instance": {
   "Type": "AWS::EC2::Instance",
   "Condition": "CreateWorkerNode8",
   "Properties": {
    "ImageId": { "Fn::If": [ "DefaultK8sNodeImageID", { "Fn::FindInMap": [ "RegionAMI", { "Ref": "AWS::Region" }, { "Ref": "K8sNodeImageType" } ] }, { "Ref": "K8sNodeImageID" } ] },
    "InstanceType": { "Ref": "K8sNodeInstanceType" },
    "NetworkInterfaces": [ { "NetworkInterfaceId": {"Ref": "K8sWorker8NetworkInterface"}, "DeviceIndex": "0" } ],
    "KeyName": { "Ref": "EC2SSHKeyPair" },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker8Instance" ] ] } } ],
    "UserData": { "Fn::Base64": { "Fn::Join": [ "", [
     "#!/bin/bash -xe", "\n",
     "touch /home/ubuntu/UserData`date +%Y%m%d%H%M%S`.Access\n",

     "sudo printf \"", { "Ref": "K8sSSHPublicKey" }, "\" >> /home/ubuntu/.ssh/authorized_keys\n",
     "timedatectl set-timezone \"", { "Ref": "TimeZone" }, "\"\n",

     "declare -a file_url\n",
     "declare -a file_name\n",
     "declare -a file_acl\n",
     "declare -a file_owner\n",
     "declare -a file_result\n",

     "file_url[0]=\"", { "Ref": "OSPreparationScript" }, "\"\n",
     "file_name[0]=\"/home/ubuntu/OSPreparationScript\"\n",
     "file_acl[0]=\"777\"\n",
     "file_owner[0]=\"ubuntu:ubuntu\"\n",

     "file_url[1]=\"", { "Ref": "DockerPreparationScript" }, "\"\n",
     "file_name[1]=\"/home/ubuntu/DockerPreparationScript\"\n",
     "file_acl[1]=\"777\"\n",
     "file_owner[1]=\"ubuntu:ubuntu\"\n",

     "file_url[2]=\"", { "Ref": "CommonK8sPreparationScript" }, "\"\n",
     "file_name[2]=\"/home/ubuntu/CommonK8sPreparationScript\"\n",
     "file_acl[2]=\"777\"\n",
     "file_owner[2]=\"ubuntu:ubuntu\"\n",

     "max_counter=2\n",

     "URLRegEx=\"^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+((\\-|\\.)[a-z0-9]+)*\\.[a-z]{2,}(:[0-9]{1,5})?(\\/.*)*$\"\n",

     "for counter in $(seq 0 $max_counter); do\n",
     " if [[ ${file_url[$counter]} =~ $URLRegEx ]] ; then\n",
     "  file_result[$counter]=$(/usr/bin/curl -sk -w \"%{http_code}\" ${file_url[$counter]} -o ${file_name[$counter]})\n",
     "  if [[ ${file_result[$counter]} == 200 ]]; then\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; ${file_name[$counter]} download complete.\"\n",
     "   chmod ${file_acl[$counter]} ${file_name[$counter]}\n",
     "   chown ${file_owner[$counter]} ${file_name[$counter]}\n",
     "  else\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; Failed to download ${file_name[$counter]} ; Continuing . . .\"\n",
     "  fi\n",
     " else\n",
     "  echo \"$counter ; Reference to the ${file_name[$counter]} was not a URL ; Continuing . . .\"\n",
     " fi\n",
     "done\n",

     "sudo bash /home/ubuntu/OSPreparationScript\n",
     "sudo bash /home/ubuntu/DockerPreparationScript\n",
     "sudo bash /home/ubuntu/CommonK8sPreparationScript\n",

     "\n"
    ]]}}
   }
  },
  "K8sWorker9Instance": {
   "Type": "AWS::EC2::Instance",
   "Condition": "CreateWorkerNode9",
   "Properties": {
    "ImageId": { "Fn::If": [ "DefaultK8sNodeImageID", { "Fn::FindInMap": [ "RegionAMI", { "Ref": "AWS::Region" }, { "Ref": "K8sNodeImageType" } ] }, { "Ref": "K8sNodeImageID" } ] },
    "InstanceType": { "Ref": "K8sNodeInstanceType" },
    "NetworkInterfaces": [ { "NetworkInterfaceId": {"Ref": "K8sWorker9NetworkInterface"}, "DeviceIndex": "0" } ],
    "KeyName": { "Ref": "EC2SSHKeyPair" },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "K8sWorker9Instance" ] ] } } ],
    "UserData": { "Fn::Base64": { "Fn::Join": [ "", [
     "#!/bin/bash -xe", "\n",
     "touch /home/ubuntu/UserData`date +%Y%m%d%H%M%S`.Access\n",

     "sudo printf \"", { "Ref": "K8sSSHPublicKey" }, "\" >> /home/ubuntu/.ssh/authorized_keys\n",
     "timedatectl set-timezone \"", { "Ref": "TimeZone" }, "\"\n",

     "declare -a file_url\n",
     "declare -a file_name\n",
     "declare -a file_acl\n",
     "declare -a file_owner\n",
     "declare -a file_result\n",

     "file_url[0]=\"", { "Ref": "OSPreparationScript" }, "\"\n",
     "file_name[0]=\"/home/ubuntu/OSPreparationScript\"\n",
     "file_acl[0]=\"777\"\n",
     "file_owner[0]=\"ubuntu:ubuntu\"\n",

     "file_url[1]=\"", { "Ref": "DockerPreparationScript" }, "\"\n",
     "file_name[1]=\"/home/ubuntu/DockerPreparationScript\"\n",
     "file_acl[1]=\"777\"\n",
     "file_owner[1]=\"ubuntu:ubuntu\"\n",

     "file_url[2]=\"", { "Ref": "CommonK8sPreparationScript" }, "\"\n",
     "file_name[2]=\"/home/ubuntu/CommonK8sPreparationScript\"\n",
     "file_acl[2]=\"777\"\n",
     "file_owner[2]=\"ubuntu:ubuntu\"\n",

     "max_counter=2\n",

     "URLRegEx=\"^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+((\\-|\\.)[a-z0-9]+)*\\.[a-z]{2,}(:[0-9]{1,5})?(\\/.*)*$\"\n",

     "for counter in $(seq 0 $max_counter); do\n",
     " if [[ ${file_url[$counter]} =~ $URLRegEx ]] ; then\n",
     "  file_result[$counter]=$(/usr/bin/curl -sk -w \"%{http_code}\" ${file_url[$counter]} -o ${file_name[$counter]})\n",
     "  if [[ ${file_result[$counter]} == 200 ]]; then\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; ${file_name[$counter]} download complete.\"\n",
     "   chmod ${file_acl[$counter]} ${file_name[$counter]}\n",
     "   chown ${file_owner[$counter]} ${file_name[$counter]}\n",
     "  else\n",
     "   echo \"$counter ; HTTP ${file_result[$counter]} ; Failed to download ${file_name[$counter]} ; Continuing . . .\"\n",
     "  fi\n",
     " else\n",
     "  echo \"$counter ; Reference to the ${file_name[$counter]} was not a URL ; Continuing . . .\"\n",
     " fi\n",
     "done\n",

     "sudo bash /home/ubuntu/OSPreparationScript\n",
     "sudo bash /home/ubuntu/DockerPreparationScript\n",
     "sudo bash /home/ubuntu/CommonK8sPreparationScript\n",

     "\n"
    ]]}}
   }
  }

 },

 "Outputs": {
  "K8sMaster1IPAddress": {
   "Description": "IP Address of K8s Master 1",
   "Value": { "Ref": "K8sMaster1EIP" }
  },
  "K8sWorker1IPAddress": {
   "Description": "IP Address of K8s Worker 1",
   "Value": { "Ref": "K8sWorker1EIP" }
  },
  "K8sWorker2IPAddress": {
   "Condition": "CreateWorkerNode2",
   "Description": "IP Address of K8s Worker 2",
   "Value": { "Ref": "K8sWorker2EIP" }
  },
  "K8sWorker3IPAddress": {
   "Condition": "CreateWorkerNode3",
   "Description": "IP Address of K8s Worker 3",
   "Value": { "Ref": "K8sWorker3EIP" }
  },
  "K8sWorker4IPAddress": {
   "Condition": "CreateWorkerNode4",
   "Description": "IP Address of K8s Worker 4",
   "Value": { "Ref": "K8sWorker4EIP" }
  },
  "K8sWorker5IPAddress": {
   "Condition": "CreateWorkerNode5",
   "Description": "IP Address of K8s Worker 5",
   "Value": { "Ref": "K8sWorker5EIP" }
  },
  "K8sWorker6IPAddress": {
   "Condition": "CreateWorkerNode6",
   "Description": "IP Address of K8s Worker 6",
   "Value": { "Ref": "K8sWorker6EIP" }
  },
  "K8sWorker7IPAddress": {
   "Condition": "CreateWorkerNode7",
   "Description": "IP Address of K8s Worker 7",
   "Value": { "Ref": "K8sWorker7EIP" }
  },
  "K8sWorker8IPAddress": {
   "Condition": "CreateWorkerNode8",
   "Description": "IP Address of K8s Worker 8",
   "Value": { "Ref": "K8sWorker8EIP" }
  },
  "K8sWorker9IPAddress": {
   "Condition": "CreateWorkerNode9",
   "Description": "IP Address of K8s Worker 9",
   "Value": { "Ref": "K8sWorker9EIP" }
  },

  "K8sDashboardURL": {
   "Description": "URL of K8s Dashboard. Run this command to obtain a token: kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/admin-user -o jsonpath=\"{.secrets[0].name}\") -o go-template=\"{{.data.token | base64decode}}\"",
   "Value": { "Fn::Join" : [ "", [ "https://", { "Ref": "K8sMaster1EIP" }, ":30443/" ] ] }
  },
  "PrometheusURL": {
   "Description": "URL of Prometheus",
   "Value": { "Fn::Join" : [ "", [ "http://", { "Ref": "K8sMaster1EIP" }, ":30081/" ] ] }
  },
  "GrafanaURL": {
   "Description": "URL of Grafana",
   "Value": { "Fn::Join" : [ "", [ "http://", { "Ref": "K8sMaster1EIP" }, ":30082/" ] ] }
  },
  "CafeWaterURL": {
   "Description": "URL of Cafe's Water API/Application",
   "Value": { "Fn::Join" : [ "", [ "http://", { "Fn::Join": [ "", [ "cafe.", { "Ref": "ParentDomainName" } ] ] }, ":31080/water" ] ] }
  },
  "CafeTeaURL": {
   "Description": "URL of Cafe's Tea API/Application",
   "Value": { "Fn::Join" : [ "", [ "http://", { "Fn::Join": [ "", [ "cafe.", { "Ref": "ParentDomainName" } ] ] }, ":31080/tea" ] ] }
  },
  "CafeCoffeeURL": {
   "Description": "URL of Cafe's Coffee API/Application",
   "Value": { "Fn::Join" : [ "", [ "http://", { "Fn::Join": [ "", [ "cafe.", { "Ref": "ParentDomainName" } ] ] }, ":31080/coffee" ] ] }
  },
  "CafeMilkURL": {
   "Description": "URL of Cafe's Milk API/Application",
   "Value": { "Fn::Join" : [ "", [ "http://", { "Fn::Join": [ "", [ "cafe.", { "Ref": "ParentDomainName" } ] ] }, ":31080/milk" ] ] }
  },
  "DVWAURL": {
   "Description": "URL of DVWA Application",
   "Value": { "Fn::Join" : [ "", [ "http://", { "Ref": "K8sMaster1EIP" }, ":31081/" ] ] }
  },
  "HackazonURL": {
   "Description": "URL of Hackazon Application",
   "Value": { "Fn::Join" : [ "", [ "http://", { "Ref": "K8sMaster1EIP" }, ":31082/" ] ] }
  },
  "JuiceShopURL": {
   "Description": "URL of Juice-Shop Application",
   "Value": { "Fn::Join" : [ "", [ "http://", { "Ref": "K8sMaster1EIP" }, ":31083/" ] ] }
  },
  "F5DemoApplicationURL": {
   "Description": "URL of F5-Demo API/Application",
   "Value": { "Fn::Join" : [ "", [ "http://", { "Ref": "K8sMaster1EIP" }, ":31084/" ] ] }
  },
  "F5DemoHTTPOrangeURL": {
   "Description": "URL of F5-Demo HTTP API/Application in Orange Color",
   "Value": { "Fn::Join" : [ "", [ "http://", { "Ref": "K8sMaster1EIP" }, ":31085/" ] ] }
  },
  "F5DemoHTTPGreenURL": {
   "Description": "URL of F5-Demo HTTP API/Application in Green Color",
   "Value": { "Fn::Join" : [ "", [ "http://", { "Ref": "K8sMaster1EIP" }, ":31086/" ] ] }
  },
  "F5DemoHTTPBlueURL": {
   "Description": "URL of F5-Demo HTTP API/Application in Blue Color",
   "Value": { "Fn::Join" : [ "", [ "http://", { "Ref": "K8sMaster1EIP" }, ":31087/" ] ] }
  }

 }

}
